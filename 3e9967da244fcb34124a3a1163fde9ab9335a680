{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "86220acc_7d325912",
        "filename": "tvix/castore/src/blobservice/object_store.rs",
        "patchSetId": 5
      },
      "lineNbr": 405,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-03-03T14:58:07Z",
      "side": 1,
      "message": "@me@griff.name just to make sure, us not calling shutdown on our `writer` here causes `upload_blob` to just get stopped, as in, it never sees a \"proper EOF\", so it doesn\u0027t persist the StatBlobResponse (and might just leave unreferenced chunks around)?",
      "revId": "3e9967da244fcb34124a3a1163fde9ab9335a680",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63748591_5ecc2ca7",
        "filename": "tvix/castore/src/blobservice/object_store.rs",
        "patchSetId": 5
      },
      "lineNbr": 405,
      "author": {
        "id": 1000082
      },
      "writtenOn": "2024-03-03T16:49:02Z",
      "side": 1,
      "message": "As long as close is called it is fine. The documentation should probably mention that calling close on a BlobWriter is mandatory and that not calling it can lead to inconsistencies.",
      "parentUuid": "86220acc_7d325912",
      "revId": "3e9967da244fcb34124a3a1163fde9ab9335a680",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f551999_51811f6c",
        "filename": "tvix/castore/src/blobservice/object_store.rs",
        "patchSetId": 5
      },
      "lineNbr": 405,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-03-03T16:59:32Z",
      "side": 1,
      "message": "That\u0027s not what I meant with my question - Assume a client uses `BlobService::open_write()`, then halfway stops writing (because the process dies, or couldn\u0027t get all the data it wanted to write, …), doesn\u0027t matter - it does not call `close()`.\n\nIn that case we don\u0027t want the blob to be finalized, aka nothing should be written in `blobs/…` (EOF code handling of `upload_blob`), only some stray `chunks/…` might be stay sitting around.\n\nDoes the code behave like this currently, or does `upload_blob` see a EOF in these cases too? If that\u0027s the case, we might need to signal differently that the upload should be aborted…",
      "parentUuid": "63748591_5ecc2ca7",
      "revId": "3e9967da244fcb34124a3a1163fde9ab9335a680",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5117a5ec_0ead2216",
        "filename": "tvix/castore/src/blobservice/object_store.rs",
        "patchSetId": 5
      },
      "lineNbr": 405,
      "author": {
        "id": 1000082
      },
      "writtenOn": "2024-03-11T18:28:47Z",
      "side": 1,
      "message": "When aborting the common thing is to simply stop polling the future and maybe dropping it. Most futures are built to be aborted this way and if the user of BlobService detects that the other process stops writing with a timeout and then gets dropped you should be fine.\n\nDepending on how atomic object store is you should get some stray chunks if it is atomic and some unfinished files laying around if it isn\u0027t atomic.",
      "parentUuid": "7f551999_51811f6c",
      "revId": "3e9967da244fcb34124a3a1163fde9ab9335a680",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d46cdadf_d0bf9831",
        "filename": "tvix/castore/src/blobservice/object_store.rs",
        "patchSetId": 5
      },
      "lineNbr": 405,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-03-11T21:17:53Z",
      "side": 1,
      "message": "Stray chunks are totally fine, it\u0027d be worse to have to figure out which ones we can remove in case an upload is cancelled (and do that race-free)",
      "parentUuid": "5117a5ec_0ead2216",
      "revId": "3e9967da244fcb34124a3a1163fde9ab9335a680",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}