{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b0ed6624_122ffe0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T17:37:02Z",
      "side": 1,
      "message": "This seems really repetitive; can\u0027t we just have two things\n\n1. A derivation\n2. A list of impure environment variables?",
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "118020b7_f6643dcb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T17:42:38Z",
      "side": 1,
      "message": "If this depends on tvix-castore it needs to be called tvix-cabuild.",
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d624e2d3_8603d2b1",
        "filename": "tvix/build/protos/LICENSE",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T17:37:02Z",
      "side": 1,
      "message": "Please change this to GPLv3",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 28
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12b94e09_78137114",
        "filename": "tvix/build/protos/LICENSE",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T17:47:38Z",
      "side": 1,
      "message": "Nak. All .proto files are MIT, also see \"License structure\" in /tvix/README.md:\n\n\u003e [â€¦] with the exception of the protocol buffer definitions used for communication between services which are available under a more permissive license (MIT).\n\nThe RPC interfaces themselves (code generated from it, like the golang bindings) are permissively licensed, so you can write your own proprietary implementation if you want.",
      "parentUuid": "d624e2d3_8603d2b1",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 28
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03ef0689_9291cb54",
        "filename": "tvix/build/protos/LICENSE",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T19:49:00Z",
      "side": 1,
      "message": "Ah, I see.  Yeah this is fine.\n\nCould you please add a LICENSE.GPL3 to //tvix/build/?",
      "parentUuid": "12b94e09_78137114",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 28
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6efa87af_6bac8d4e",
        "filename": "tvix/build/protos/LICENSE",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T20:42:21Z",
      "side": 1,
      "message": "There is already a GPL-3 license in //tvix itself, there\u0027s only a MIT License in //tvix/build/protos.\n\nHow would duplicating it in there change things?",
      "parentUuid": "03ef0689_9291cb54",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 28
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99a1c58e_cccc0d19",
        "filename": "tvix/build/protos/LICENSE",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-11T21:37:33Z",
      "side": 1,
      "message": "Marking as resolved.",
      "parentUuid": "6efa87af_6bac8d4e",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 28
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "118686e0_337c00df",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T17:37:02Z",
      "side": 1,
      "message": "Please change this to \"how e.g. *impure* environment variables in the build are set\".  I found this sentence very confusing until I read the next paragraph.",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 55
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1561d892_c7d8dd77",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T18:56:42Z",
      "side": 1,
      "message": "I actually forgot to add the non-impure environment variables (from https://github.com/adisbladis/go-nix/commit/603df5db86ab97ba29f6f94d74f4e51642c56834#diff-60d42249bb53df5d3ffd44f507aee87a57c2cff5a20f6b1d8403a76d0ce609b0R45-R61) to cl/10236.\n\nIt\u0027s now in https://cl.tvl.fyi/c/depot/+/10236/8 - does it make more sense now? With that in mind, how would you write this section?\n\nWhat I meant to say is that the builder doesn\u0027t need to know the meaning of any of these environment variables, it\u0027s just flattened out in the BuildRequest, and done by derivation_to_build_request when translating from a Derivation to a BuildRequest.",
      "parentUuid": "118686e0_337c00df",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 55
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dc6703c_e435d91a",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T18:56:42Z",
      "side": 1,
      "message": "Comment removed by: tazjin; Reason: Accidental double submit of comment",
      "parentUuid": "118686e0_337c00df",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 55
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01e37628_b12e45bb",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T18:57:35Z",
      "side": 1,
      "message": "(ignore the last (smaller) comment, gerrit burped on two drafts in the same thread)",
      "parentUuid": "9dc6703c_e435d91a",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 55
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5350be38_346bba06",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T19:58:04Z",
      "side": 1,
      "message": "Okay the \"derivation plus impure environment variables, but flattened\".\n\nBut how would you go backwards from a BuildRequest to a Derivation?\n\nThis is a good example of the kind of trouble we might run into if we defer implementing the daemon protocol for too long.  I don\u0027t think you can go backwards from a BuildRequest to a Derivation, so we have to be careful not to turn Derivations into BuildRequests until we\u0027re totally certain we won\u0027t be using the daemon protocol.\n\nSo it makes me a bit nervous to be committing to stuff like this without an implementation of the \"daemon protocol translator\".  I guess I\u0027d be a lot more comfortable if the daemon protocol translator were implemented simultaneously with this.",
      "parentUuid": "01e37628_b12e45bb",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 55
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1382fa1c_b63ce3bd",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T20:42:21Z",
      "side": 1,
      "message": "Everything in tvix is still experimental, there\u0027s no backwards-compat promises. Landing this as-is won\u0027t cement us into this approach.\n\nThe nix daemon protocol will take a while to materialize, I don\u0027t want to block this whole chain until we have a full E2E example with the old daemon protocol.\n\nIn the past, I did already re-architect stuff if something didn\u0027t work out, I\u0027m happy to do this again if need be.",
      "parentUuid": "5350be38_346bba06",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 55
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ede3a82_4729ee09",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-12-11T21:33:50Z",
      "side": 1,
      "message": "I think the build component is still too immature to consider this as cementing stuff, we _will_ probably have to redo work, especially when we will reach out to the \"daemon protocol translator\". As it\u0027s impossible to review a XXXL CL implementing everything simultaneously, I would be in favor of proceeding with the fact that Derivation -\u003e BuildRequest is kind of a forgetful functor.",
      "parentUuid": "1382fa1c_b63ce3bd",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 55
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd7ddc17_ff1f7430",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-11T21:37:33Z",
      "side": 1,
      "message": "Marking as resolved.",
      "parentUuid": "1382fa1c_b63ce3bd",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 55
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "581ae2a1_cc1a5288",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T17:37:02Z",
      "side": 1,
      "message": "I\u0027m having a hard time understanding this.  Yes, the daemon protocol has opcodes for uploading input addressed store paths, but you don\u0027t have to use them if you\u0027re willing to upload the entire derivation tree.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 75
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f566ffa_1ddfbf7c",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T17:47:38Z",
      "side": 1,
      "message": "The point I\u0027m trying to make here is that a BuildRequest in itself is hermetic - all inputs are content-addressed by their castore nodes, and an individual build request doesn\u0027t need to maintain a global \"trusted\" context of input-addressed paths to their contents.",
      "parentUuid": "581ae2a1_cc1a5288",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 75
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfadf849_0fad51a0",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T19:58:04Z",
      "side": 1,
      "message": "I would replace the highlighted text with \"This requires that for every input-addressed input, the builder has access to either the input\u0027s deriver or else a trusted source for the built input.\"",
      "parentUuid": "9f566ffa_1ddfbf7c",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 75
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fc09c17_a190f1cb",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T20:42:21Z",
      "side": 1,
      "message": "No, the builder doesn\u0027t have to have access to the inputs deriver or a trusted source for the build input. Everything in BuildRequest (and `inputs` specifically) is sufficient to realize everything needed to do the build.\n\nWe need someone to bring us the data, sure, but because all of this is content-addressed, we don\u0027t need to trust anyone, we can detect if they send us wrong data.",
      "parentUuid": "bfadf849_0fad51a0",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 75
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c13d254_5790aa41",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-11T21:37:33Z",
      "side": 1,
      "message": "Ah, I see, this is about the Nix\u0027 way. Sorry. I updated to use your suggestion (and added a \"(and needs to build it)\").",
      "parentUuid": "8fc09c17_a190f1cb",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 75
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f61a59f9_04852913",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T17:37:02Z",
      "side": 1,
      "message": "So tvix-build cannot be used with just an ordinary store?\n\nYou mean it has a hard requirement on tvix-castore?  Hrm.  Not sure about that.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 66
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cda26db2_fffae819",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T17:47:38Z",
      "side": 1,
      "message": "The tvix RPC protocol identifies build inputs by their tvix-castore nodes. This is an advantage over plain paths due to the reasons described in comments and elsewhere in this file.",
      "parentUuid": "f61a59f9_04852913",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 66
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24268682_05f0afb7",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T19:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cda26db2_fffae819",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 66
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "506cdc22_d07ddd72",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T17:37:02Z",
      "side": 1,
      "message": "This seems really repetitive; can\u0027t we just have two things\n\n1. A derivation\n2. A list of impure environment variables?",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 22
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5243dd1a_9e1352ef",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-12-09T17:47:38Z",
      "side": 1,
      "message": "There\u0027s no RPC definiton yet, this essentially is the derivation and other impure env vars/requirements.",
      "parentUuid": "506cdc22_d07ddd72",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 22
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d0934e6_dae8a763",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-12-09T19:58:04Z",
      "side": 1,
      "message": "This makes more sense now after our discussion.\n\nBut I do think that if we\u0027re going to have tvix\u0027s \"native protocol\" be something new, we should implement the translator to the old protocol simultaneously with it, so we don\u0027t end up with any ugly surprises later on.",
      "parentUuid": "5243dd1a_9e1352ef",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 22
      },
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "302b3263_11eb943c",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-12-11T21:33:50Z",
      "side": 1,
      "message": "nit/design: I think minimum memory is a hint rather than a constraint. In general, you don\u0027t know in advance how much memory you need, you may set a value, try, fail, bump that value.\n\nIf you setup a minimum memory, you may want to set up a minimum disk space of the tempfs or something like that?\n\nEither case, in my ideal world, I would say that minimum memory and other resources should be automatically figured out and passed back as **hints** to the whole system, e.g. you run things, you see it fails because OOM, you derive a better value, you try it again, until it doesn\u0027t OOM or OOM \"terminally\" and then you can \"know\" about that hint.\n\nHints are probably specific to that very derivation and set of constraints, e.g. running a derivation without KVM for NixOS tests will have another set of performance requirements that with KVM, etc.\n\nThat\u0027s how I view this design feature, we can proceed with a constraint for now. It\u0027s a **nit**.",
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7854c11_3bbfd1ee",
        "filename": "tvix/build/protos/build.proto",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-12-11T21:33:50Z",
      "side": 1,
      "message": "This loops back to my hint proposal.",
      "revId": "18d06c6e06bbbca824c0560ea13e5db728a269f9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}