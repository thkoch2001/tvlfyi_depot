{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7b8ee673_c0ddc2bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 9,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-05-07T09:48:17Z",
      "side": 1,
      "message": "s/If/As/? I assumed we require the underlying reader to be buffered now?",
      "revId": "a17b93f60bd9f0a320dd6c0fbd34ab2702a7610d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9811fb7_835712e8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 9,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2024-05-08T01:23:52Z",
      "side": 1,
      "message": "No, that\u0027s only the case for the NAR reader, which takes `\u0026mut dyn AsyncBufRead`. You can still use BytesReader with an unbuffered underlying reader if so desired.",
      "parentUuid": "7b8ee673_c0ddc2bf",
      "revId": "a17b93f60bd9f0a320dd6c0fbd34ab2702a7610d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8081230c_796a05ee",
        "filename": "tvix/nix-compat/src/nar/reader/async/mod.rs",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 1000082
      },
      "writtenOn": "2024-05-08T13:58:06Z",
      "side": 1,
      "message": "I get that having AsyncBufRead propergate down through readers is useful but was there a reason that Reader type is `dyn AsyncBufRead` and not a generic?",
      "revId": "a17b93f60bd9f0a320dd6c0fbd34ab2702a7610d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd59fbd7_4c9d527c",
        "filename": "tvix/nix-compat/src/nar/reader/async/mod.rs",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 1000082
      },
      "writtenOn": "2024-05-08T14:02:06Z",
      "side": 1,
      "message": "I ask because aside from the copy_buf use you introduce in this CL there is nothing in the implementation of the nar reader that requires the underlying reader be AsyncBufRead. If a generic was used instead of `dyn AsyncBufRead` the underlying reader could be agnostic to the whole issue of needing FileReader to implement AsyncBufRead. So that if you need FileReader to implement AsyncBufRead you have to ennsure that the underlying reader supports AsyncBufRead. While if you don\u0027t have that requirement you can still use the nar reader with a normal AsyncRead.",
      "parentUuid": "8081230c_796a05ee",
      "revId": "a17b93f60bd9f0a320dd6c0fbd34ab2702a7610d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70fd7193_3bd51fa8",
        "filename": "tvix/nix-compat/src/nar/reader/async/mod.rs",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2024-05-08T14:48:17Z",
      "side": 1,
      "message": "The AsyncBufRead requirement is intentional. We rely on performing many small reads to be cheap, and anytime you provide an unbuffered reader you are almost certainly shooting yourself in the foot.\n\nUsing a generic here causes a lot of code blowup and makes all the types more complicated (it would propagate into the Node type), for little gain. That too is intentional.",
      "parentUuid": "cd59fbd7_4c9d527c",
      "revId": "a17b93f60bd9f0a320dd6c0fbd34ab2702a7610d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45bebbe3_27203582",
        "filename": "tvix/nix-compat/src/nar/reader/async/mod.rs",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 1000082
      },
      "writtenOn": "2024-05-08T16:03:38Z",
      "side": 1,
      "message": "An AsyncRead can also be buffered and the only thing AsyncBufRead provides is access to that buffer. The problem I have with it is when I want to layer AsyncRead streams on top each other (like for the nix daemon) I now have to make sure each layer supports AsyncBufRead (because I assume the lowest layer is at least buffered and anything else is as you say shooting myself in the foot) or wrap to get an ekstra buffer just to call the nar reader interface. It reduces my flexibility as a user of the API when nothing in the code requires the extra methods in AsyncBufRead and it just functions as a marker saying \"reader needs to be buffered\".\n\nWhen ingesting a nar into twix that is all fine because it now uses copy_buf and so require AsyncBufRead but one of the things I want to use the nix daemon protocol for is as a proxy where I am more just moving a nar from one port to the other. I need the nar reader for this because to find the end of the stream where the nar is I have to parse the damn thing.",
      "parentUuid": "70fd7193_3bd51fa8",
      "revId": "a17b93f60bd9f0a320dd6c0fbd34ab2702a7610d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "658b9cf1_d12ee5d6",
        "filename": "tvix/nix-compat/src/nar/reader/async/mod.rs",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2024-05-08T17:51:06Z",
      "side": 1,
      "message": "Even if you\u0027re just copying, you\u0027ll need an internal buffer *somewhere*. `write()` takes a buffer, after all. Regular `copy()` just allocates an internal buffer for this purpose, and then throws it away immediately, to be reallocated on the next copy. In other words, an allocation cycle for every file.\n\nI\u0027d honestly recommend just wrapping the stream and using `copy_buf`. The other wire protocol code being laxer in its trait bounds isn\u0027t particularly honest either, since the NAR reader really is the only thing that actually does large contiguous reads.",
      "parentUuid": "45bebbe3_27203582",
      "revId": "a17b93f60bd9f0a320dd6c0fbd34ab2702a7610d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}