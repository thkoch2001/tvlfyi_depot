{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "681f6f98_f8b442fc",
        "filename": "tvix/nix-compat/Cargo.toml",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:45:32Z",
      "side": 1,
      "message": "Make this `optional \u003d true`, and add a nondefault `fetchtree` feature flag above, which pulls in `url`.\n\nThat way `nix-compat` consumers don\u0027t need to pull in their `Cargo.lock` and `Cargo.nix` to pull in `url` (which is what\u0027s currently causing CI to fail).",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7933a89d_b8a4b620",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:41:25Z",
      "side": 1,
      "message": "We probably don\u0027t need to do this at all inside this helpers. If we need to pass along arguments this can just be done inside the builtin implementation.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b842a4d_56a6e396",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "Can the enum kinds be sorted alphabetically, or grouped semantically (and alphabetically sorted inside each group)",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f643066d_5f7b67ff",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000090
      },
      "writtenOn": "2024-11-07T18:41:02Z",
      "side": 1,
      "message": "```suggestion\n        Ok(match s {\n            \"path\" \u003d\u003e FetchType::Path,\n            \"file\" \u003d\u003e FetchType::File,\n            \"tarball\" \u003d\u003e FetchType::Tarball,\n            \"git\" \u003d\u003e FetchType::Git,\n            \"github\" \u003d\u003e FetchType::GitHub,\n            \"gitlab\" \u003d\u003e FetchType::GitLab,\n            \"sourcehut\" \u003d\u003e FetchType::SourceHut,\n            \"indirect\" \u003d\u003e FetchType::Indirect,\n            // TODO: No Mercurial support: https://github.com/search?q\u003dpath%3A%2F%5Eflake.lock%24%2F+%28%2F%22hg%22%2F+OR+%2F%22mercurial%22%2F%29\u0026type\u003dcode\n            _ \u003d\u003e return Err(FetchTreeError::UnsupportedType(s.to_string())),\n        })\n```",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 9
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bbd5ebf_527f219b",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:38:21Z",
      "side": 1,
      "message": "```suggestion\n    UrlParseError(#[from] url::ParseError),\n```",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0cc4da6_680e3bf1",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:41:25Z",
      "side": 1,
      "message": "```suggestion\n    let mut url \u003d Url::parse(url)?;\n```",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ba623ab_655ff88d",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "Add a comment explaining that Nix always uses the fetch type before a `+` in the scheme if exists, using the rest as URL.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2911c4fb_94888614",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "add a comment explaining the url crate doesn\u0027t let us set the scheme, similar to other places in tvix.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd949cd_44eacad1",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:38:21Z",
      "side": 1,
      "message": "```suggestion\n        url \u003d Url::parse(\u0026url_str)?;\n```\n\nThe `#[from]` above automatically does implement `Into`, and `?` tries the conversion.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e754dace_e4aeb3fe",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "If you call these two `r#ref` and `rev`, you can use shorthand struct initialization below.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f8f2051_f3357a13",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "same here. Though we probably want to move the submodules_param extraction inside only this match arm.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "989269bb_cae95ab8",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "Can all this stuff be customized using url params? If so, let\u0027s add a TODO in here.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d4411d3_081f0b7d",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1000090
      },
      "writtenOn": "2024-11-07T18:57:34Z",
      "side": 1,
      "message": "```suggestion\n    Ok(match fetch_type {\n        FetchType::File \u003d\u003e FetchTreeArgs::File {\n            url,\n            nar_hash: None,\n            rev: rev_param,\n            rev_count: None,\n            last_modified: None,\n        },\n        FetchType::Tarball \u003d\u003e FetchTreeArgs::Tarball {\n            url,\n            nar_hash: None,\n            rev: rev_param,\n            rev_count: None,\n            last_modified: None,\n        },\n        FetchType::Indirect \u003d\u003e FetchTreeArgs::Indirect {\n            id: url.path().to_string(),\n            rev: rev_param,\n            r#ref: ref_param,\n        },\n        FetchType::Git \u003d\u003e FetchTreeArgs::Git {\n            url,\n            r#ref: ref_param,\n            rev: rev_param,\n            keytype: None,\n            public_key: None,\n            public_keys: None,\n            shallow: true,\n            submodules: submodules_param,\n            export_ignore: false,\n            all_refs: false,\n            verify_commit: false,\n        },\n        FetchType::Path \u003d\u003e FetchTreeArgs::Path {\n            path: PathBuf::from(url.path()),\n            rev: rev_param,\n            nar_hash: None,\n            rev_count: None,\n            last_modified: None,\n        },\n        FetchType::GitHub \u003d\u003e FetchTreeArgs::GitHub {\n            r#ref: ref_param,\n            rev: rev_param,\n            keytype: None,\n            public_key: None,\n            public_keys: None,\n        },\n        FetchType::GitLab \u003d\u003e FetchTreeArgs::GitLab {\n            r#ref: ref_param,\n            rev: rev_param,\n            keytype: None,\n            public_key: None,\n            public_keys: None,\n        },\n        FetchType::SourceHut \u003d\u003e FetchTreeArgs::SourceHut {\n            r#ref: ref_param,\n            rev: rev_param,\n            keytype: None,\n            public_key: None,\n            public_keys: None,\n        },\n    })\n```",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 220,
        "endChar": 5
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}