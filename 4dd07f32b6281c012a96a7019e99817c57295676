{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "902f4af0_fe6a5d81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-11-07T20:33:32Z",
      "side": 1,
      "message": "Really cool to see initial work on fetchTree üëç\nI don\u0027t know how compatible this should be with how Nix parses URLs. It probably changes over time and there seems to be a difference between how CLI URLs are parsed and how fetchTree parses URLs. If the focus is fetchTree, then it is stricter on local file/directory paths.\n\nLooking at the tests, it seems there could be quite a few of them. Maybe not for this change, but would https://insta.rs/ be an option to check the full structs, instead of individual hand-picked fields to assert?",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "681f6f98_f8b442fc",
        "filename": "tvix/nix-compat/Cargo.toml",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:45:32Z",
      "side": 1,
      "message": "Make this `optional \u003d true`, and add a nondefault `fetchtree` feature flag above, which pulls in `url`.\n\nThat way `nix-compat` consumers don\u0027t need to pull in their `Cargo.lock` and `Cargo.nix` to pull in `url` (which is what\u0027s currently causing CI to fail).",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10ecb88a_73cd2859",
        "filename": "tvix/nix-compat/Cargo.toml",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "681f6f98_f8b442fc",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7933a89d_b8a4b620",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:41:25Z",
      "side": 1,
      "message": "We probably don\u0027t need to do this at all inside this helpers. If we need to pass along arguments this can just be done inside the builtin implementation.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0dffa19_14b4f87e",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7933a89d_b8a4b620",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b842a4d_56a6e396",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "Can the enum kinds be sorted alphabetically, or grouped semantically (and alphabetically sorted inside each group)",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e5750dc_19282c44",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b842a4d_56a6e396",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f643066d_5f7b67ff",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000090
      },
      "writtenOn": "2024-11-07T18:41:02Z",
      "side": 1,
      "message": "```suggestion\n        Ok(match s {\n            \"path\" \u003d\u003e FetchType::Path,\n            \"file\" \u003d\u003e FetchType::File,\n            \"tarball\" \u003d\u003e FetchType::Tarball,\n            \"git\" \u003d\u003e FetchType::Git,\n            \"github\" \u003d\u003e FetchType::GitHub,\n            \"gitlab\" \u003d\u003e FetchType::GitLab,\n            \"sourcehut\" \u003d\u003e FetchType::SourceHut,\n            \"indirect\" \u003d\u003e FetchType::Indirect,\n            // TODO: No Mercurial support: https://github.com/search?q\u003dpath%3A%2F%5Eflake.lock%24%2F+%28%2F%22hg%22%2F+OR+%2F%22mercurial%22%2F%29\u0026type\u003dcode\n            _ \u003d\u003e return Err(FetchTreeError::UnsupportedType(s.to_string())),\n        })\n```",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 9
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e4bba0e_7d91f334",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f643066d_5f7b67ff",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 9
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bbd5ebf_527f219b",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:38:21Z",
      "side": 1,
      "message": "```suggestion\n    UrlParseError(#[from] url::ParseError),\n```",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a496297_42af24c8",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bbd5ebf_527f219b",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0cc4da6_680e3bf1",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:41:25Z",
      "side": 1,
      "message": "```suggestion\n    let mut url \u003d Url::parse(url)?;\n```",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bed5eae_afa6701a",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0cc4da6_680e3bf1",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ba623ab_655ff88d",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "Add a comment explaining that Nix always uses the fetch type before a `+` in the scheme if exists, using the rest as URL.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3bc3e55_0415da25",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ba623ab_655ff88d",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb0e9470_2fa446bc",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-08T15:47:28Z",
      "side": 1,
      "message": "This allows `github+github:flokli/nixpkgs`, which doesn\u0027t actually work in Nix:\n\n```\nnix-repl\u003e builtins.fetchTree \"github:flokli/nixpkgs\"\n[12.2 MiB DL] copying \u0027¬´github:flokli/nixpkgs/7e31aef88a03b32c31f2965bf532e07564ec5b2d¬ª/\u0027 to the store{\n  lastModified \u003d 1509555488;\n  lastModifiedDate \u003d \"20171101165808\";\n  narHash \u003d \"sha256-RT2l+kHTmMgeSe2jjzditquSMQQ2j4j6ewysQ9ou9tY\u003d\";\n  outPath \u003d \"/nix/store/sg9978mshjpl0hxf1qahcnj1n9prk9b0-source\";\n  rev \u003d \"7e31aef88a03b32c31f2965bf532e07564ec5b2d\";\n  shortRev \u003d \"7e31aef\";\n}\n\nnix-repl\u003e builtins.fetchTree \"github+github:flokli/nixpkgs\"\nerror:\n       ‚Ä¶ while calling the \u0027fetchTree\u0027 builtin\n         at ¬´string¬ª:1:1:\n            1| builtins.fetchTree \"github+github:flokli/nixpkgs\"\n             | ^\n\n       error: input \u0027github+github:flokli/nixpkgs\u0027 is unsupported\n```",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "256fc198_06df07e1",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-11-07T20:33:32Z",
      "side": 1,
      "message": "Nix only explicitly seems to be supporting `git+https`, `git+ssh`, `git+file` and `git`.\n`git+git`, `git+path`, `git+something` are not (`error: input \u0027git+path:./nixos/nixpkgs\u0027 is unsupported`).\n\nMight be ok to only use direct schemes here? (so there is no need for splitting)",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4799bf8_d1980906",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000090
      },
      "writtenOn": "2024-11-07T19:23:35Z",
      "side": 1,
      "message": "```suggestion\n            _ if {\n                const VALID_EXTENSIONS: [\u0026str; 7] \u003d [\n                    \".zip\", \".tar\", \".tgz\", \".tar.gz\", \".tar.xz\", \".tar.bz2\", \".tar.zst\",\n                ];\n                VALID_EXTENSIONS\n                    .iter()\n                    .any(|\u0026ext| url.path().ends_with(ext))\n            } \u003d\u003e\n```",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 132,
        "endChar": 54
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15b5b733_3ee49d62",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-11-07T20:33:32Z",
      "side": 1,
      "message": "From what I can see Nix doesn\u0027t support file-URLs as-is. For instance:\n\n```\n$ nix build ~/Downloads/a.zip\nerror: path \u0027/home/bob.vanderlinden/Downloads/a.zip\u0027 is not a flake (because it\u0027s not a directory)\n```\n\nFor `fetchTree` it\u0027ll just not parse the URL at all:\n\n```\n$ nix eval --expr \u0027builtins.fetchTree \"/some/path\"\u0027\nerror:\n       ‚Ä¶ while calling the \u0027fetchTree\u0027 builtin\n         at ¬´string¬ª:1:1:\n            1| builtins.fetchTree \"/some/path\"\n             | ^\n\n       error: \u0027/some/path\u0027 is not a valid URL\n```\n\nMaybe it\u0027s best to return `UrlParseError` for all other protocols for now?\nOr is there another use-case where it does support these URLs explicitly?",
      "parentUuid": "c4799bf8_d1980906",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 132,
        "endChar": 54
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8c2c975_0290a63b",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15b5b733_3ee49d62",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 132,
        "endChar": 54
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2911c4fb_94888614",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "add a comment explaining the url crate doesn\u0027t let us set the scheme, similar to other places in tvix.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37e3e480_b17687f3",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2911c4fb_94888614",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd949cd_44eacad1",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:38:21Z",
      "side": 1,
      "message": "```suggestion\n        url \u003d Url::parse(\u0026url_str)?;\n```\n\nThe `#[from]` above automatically does implement `Into`, and `?` tries the conversion.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed6b3020_6d287f8d",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ccd949cd_44eacad1",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e754dace_e4aeb3fe",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "If you call these two `r#ref` and `rev`, you can use shorthand struct initialization below.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "250fbfc9_578c64d2",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e754dace_e4aeb3fe",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f8f2051_f3357a13",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "same here. Though we probably want to move the submodules_param extraction inside only this match arm.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "138d487b_3aab93ab",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f8f2051_f3357a13",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "989269bb_cae95ab8",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-07T18:36:33Z",
      "side": 1,
      "message": "Can all this stuff be customized using url params? If so, let\u0027s add a TODO in here.",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26d3df35_6fa5e1ff",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "989269bb_cae95ab8",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b197263f_16b1c94e",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-11-07T20:33:32Z",
      "side": 1,
      "message": "I think each of these need their own parsing. For instance, Nix itself strictly doesn\u0027t allow `github:something`, but `github:something/else` is allowed (it extracts the owner and repo separately).\n\nFor ref specifically in combination with GitHub it conflicts with the branch of `github:owner/repo/branch`. Nix explicitly disallows this (`   error: URL \u0027github:nixos/nixpkgs/nixpkgs-unstable?ref\u003dnixos-24.05\u0027 contains multiple branch/tag names`).",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38b0f4de_fa7578a6",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b197263f_16b1c94e",
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d4411d3_081f0b7d",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1000090
      },
      "writtenOn": "2024-11-07T18:57:34Z",
      "side": 1,
      "message": "```suggestion\n    Ok(match fetch_type {\n        FetchType::File \u003d\u003e FetchTreeArgs::File {\n            url,\n            nar_hash: None,\n            rev: rev_param,\n            rev_count: None,\n            last_modified: None,\n        },\n        FetchType::Tarball \u003d\u003e FetchTreeArgs::Tarball {\n            url,\n            nar_hash: None,\n            rev: rev_param,\n            rev_count: None,\n            last_modified: None,\n        },\n        FetchType::Indirect \u003d\u003e FetchTreeArgs::Indirect {\n            id: url.path().to_string(),\n            rev: rev_param,\n            r#ref: ref_param,\n        },\n        FetchType::Git \u003d\u003e FetchTreeArgs::Git {\n            url,\n            r#ref: ref_param,\n            rev: rev_param,\n            keytype: None,\n            public_key: None,\n            public_keys: None,\n            shallow: true,\n            submodules: submodules_param,\n            export_ignore: false,\n            all_refs: false,\n            verify_commit: false,\n        },\n        FetchType::Path \u003d\u003e FetchTreeArgs::Path {\n            path: PathBuf::from(url.path()),\n            rev: rev_param,\n            nar_hash: None,\n            rev_count: None,\n            last_modified: None,\n        },\n        FetchType::GitHub \u003d\u003e FetchTreeArgs::GitHub {\n            r#ref: ref_param,\n            rev: rev_param,\n            keytype: None,\n            public_key: None,\n            public_keys: None,\n        },\n        FetchType::GitLab \u003d\u003e FetchTreeArgs::GitLab {\n            r#ref: ref_param,\n            rev: rev_param,\n            keytype: None,\n            public_key: None,\n            public_keys: None,\n        },\n        FetchType::SourceHut \u003d\u003e FetchTreeArgs::SourceHut {\n            r#ref: ref_param,\n            rev: rev_param,\n            keytype: None,\n            public_key: None,\n            public_keys: None,\n        },\n    })\n```",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 220,
        "endChar": 5
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "daf4f582_839e7c94",
        "filename": "tvix/nix-compat/src/fetchtree/mod.rs",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1000139
      },
      "writtenOn": "2024-11-08T15:35:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d4411d3_081f0b7d",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 220,
        "endChar": 5
      },
      "revId": "4dd07f32b6281c012a96a7019e99817c57295676",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}