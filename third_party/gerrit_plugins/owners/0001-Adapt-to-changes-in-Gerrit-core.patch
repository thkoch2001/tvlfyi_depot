From d133b8eb64325f6896ef806c40c1ce56a769f13d Mon Sep 17 00:00:00 2001
From: Luke Granger-Brown <git@lukegb.com>
Date: Mon, 27 Dec 2021 04:53:02 +0000
Subject: [PATCH] Adapt to changes in Gerrit core.

---
 .../gerrit/owners/common/PathOwners.java      | 32 ++++++++----------
 .../gerrit/owners/common/Config.java          | 33 ++++++++++---------
 .../gerrit/owners/common/PathOwnersTest.java  | 12 +++----
 .../gerrit/owners/common/RegexTest.java       |  8 ++---
 .../gerrit/owners/OwnersStoredValues.java     |  7 ++--
 5 files changed, 45 insertions(+), 47 deletions(-)

diff --git a/owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java b/owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java
index 6bf288b..cdbc8f8 100644
--- a/owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java
+++ b/owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java
@@ -16,8 +16,6 @@
 
 package com.googlesource.gerrit.owners.common;
 
-import static com.google.gerrit.entities.Patch.COMMIT_MSG;
-import static com.google.gerrit.entities.Patch.MERGE_LIST;
 import static com.googlesource.gerrit.owners.common.JgitWrapper.getBlobAsBytes;
 
 import com.google.common.collect.Maps;
@@ -28,8 +26,7 @@ import com.google.gerrit.entities.Account;
 import com.google.gerrit.entities.Account.Id;
 import com.google.gerrit.entities.Patch;
 import com.google.gerrit.entities.RefNames;
-import com.google.gerrit.server.patch.PatchList;
-import com.google.gerrit.server.patch.PatchListEntry;
+import com.google.gerrit.server.patch.filediff.FileDiffOutput;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Collections;
@@ -54,7 +51,7 @@ public class PathOwners {
 
   private final Repository repository;
 
-  private final PatchList patchList;
+  private final Map<String, FileDiffOutput> diffList;
 
   private final ConfigurationParser parser;
 
@@ -64,9 +61,9 @@ public class PathOwners {
 
   private Map<String, Set<Id>> fileOwners;
 
-  public PathOwners(Accounts accounts, Repository repository, String branch, PatchList patchList) {
+  public PathOwners(Accounts accounts, Repository repository, String branch, Map<String, FileDiffOutput> diffList) {
     this.repository = repository;
-    this.patchList = patchList;
+    this.diffList = diffList;
     this.parser = new ConfigurationParser(accounts);
     this.accounts = accounts;
 
@@ -253,17 +250,16 @@ public class PathOwners {
    */
   private Set<String> getModifiedPaths() {
     Set<String> paths = Sets.newHashSet();
-    for (PatchListEntry patch : patchList.getPatches()) {
-      // Ignore commit message and Merge List
-      String newName = patch.getNewName();
-      if (!COMMIT_MSG.equals(newName) && !MERGE_LIST.equals(newName)) {
-        paths.add(newName);
-
-        // If a file was moved then we need approvals for old and new
-        // path
-        if (patch.getChangeType() == Patch.ChangeType.RENAMED) {
-          paths.add(patch.getOldName());
-        }
+    for (FileDiffOutput diffEntry : diffList.values()) {
+      // We want approvals for both old and new paths.
+      // In some cases, only one or the other will exist.
+      // For ADDED files, only the newPath exists.
+      // For DELETED files, only the oldPath exists.
+      if (diffEntry.newPath().isPresent()) {
+        paths.add(diffEntry.newPath().get());
+      }
+      if (diffEntry.oldPath().isPresent()) {
+        paths.add(diffEntry.oldPath().get());
       }
     }
     return paths;
diff --git a/owners-common/src/test/java/com/googlesource/gerrit/owners/common/Config.java b/owners-common/src/test/java/com/googlesource/gerrit/owners/common/Config.java
index ea00372..c2553b3 100644
--- a/owners-common/src/test/java/com/googlesource/gerrit/owners/common/Config.java
+++ b/owners-common/src/test/java/com/googlesource/gerrit/owners/common/Config.java
@@ -20,21 +20,24 @@ import static org.easymock.EasyMock.expect;
 
 import com.google.common.base.Charsets;
 import com.google.gerrit.entities.Patch;
-import com.google.gerrit.server.patch.PatchList;
-import com.google.gerrit.server.patch.PatchListEntry;
+import com.google.gerrit.server.patch.filediff.FileDiffOutput;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 import org.eclipse.jgit.lib.Repository;
 import org.junit.Ignore;
 import org.powermock.api.easymock.PowerMock;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 
 @Ignore
+@PowerMockIgnore({"javax.management.*", "com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "org.w3c.dom.*", "com.sun.org.apache.xalan.*", "javax.activation.*", "jdk.internal.reflect.*"})
 public abstract class Config {
   protected Repository repository;
-  protected PatchList patchList;
+  protected Map<String, FileDiffOutput> diffList;
   protected ConfigurationParser parser;
   protected TestAccounts accounts = new TestAccounts();
   protected String branch = "master";
@@ -62,23 +65,21 @@ public abstract class Config {
         .anyTimes();
   }
 
-  void creatingPatch(String... fileNames) {
-    creatingPatchList(Arrays.asList(fileNames));
+  void creatingDiff(String... fileNames) {
+    creatingDiffList(Arrays.asList(fileNames));
   }
 
-  void creatingPatchList(List<String> names) {
-    patchList = PowerMock.createMock(PatchList.class);
-    List<PatchListEntry> entries =
-        names.stream().map(name -> expectEntry(name)).collect(Collectors.toList());
-    expect(patchList.getPatches()).andReturn(entries);
+  void creatingDiffList(List<String> names) {
+    Map<String, FileDiffOutput> entries =
+        names.stream().collect(Collectors.toMap(Function.identity(), name -> expectEntry(name)));
+    diffList = entries;
   }
 
-  PatchListEntry expectEntry(String name) {
-    PatchListEntry entry = PowerMock.createMock(PatchListEntry.class);
-    expect(entry.getNewName()).andReturn(name).anyTimes();
-    expect(entry.getChangeType()).andReturn(Patch.ChangeType.MODIFIED).anyTimes();
-    expect(entry.getDeletions()).andReturn(1);
-    expect(entry.getInsertions()).andReturn(1);
+  FileDiffOutput expectEntry(String name) {
+    FileDiffOutput entry = PowerMock.createMock(FileDiffOutput.class);
+    expect(entry.newPath()).andReturn(Optional.of(name)).anyTimes();
+    expect(entry.oldPath()).andReturn(Optional.of(name)).anyTimes();
+    expect(entry.changeType()).andReturn(Patch.ChangeType.MODIFIED).anyTimes();
     return entry;
   }
 
diff --git a/owners-common/src/test/java/com/googlesource/gerrit/owners/common/PathOwnersTest.java b/owners-common/src/test/java/com/googlesource/gerrit/owners/common/PathOwnersTest.java
index df2b891..2bd3dc5 100644
--- a/owners-common/src/test/java/com/googlesource/gerrit/owners/common/PathOwnersTest.java
+++ b/owners-common/src/test/java/com/googlesource/gerrit/owners/common/PathOwnersTest.java
@@ -43,10 +43,10 @@ public class PathOwnersTest extends ClassicConfig {
     expectNoConfig("OWNERS");
     expectConfig("classic/OWNERS", createConfig(false, owners(USER_A_EMAIL_COM, USER_B_EMAIL_COM)));
 
-    creatingPatchList(Arrays.asList("classic/file.txt"));
+    creatingDiffList(Arrays.asList("classic/file.txt"));
     replayAll();
 
-    PathOwners owners = new PathOwners(accounts, repository, branch, patchList);
+    PathOwners owners = new PathOwners(accounts, repository, branch, diffList);
     Set<Account.Id> ownersSet = owners.get().get("classic/OWNERS");
     assertEquals(2, ownersSet.size());
     assertTrue(ownersSet.contains(USER_A_ID));
@@ -58,10 +58,10 @@ public class PathOwnersTest extends ClassicConfig {
     expectConfig("OWNERS", createConfig(true, owners(USER_C_EMAIL_COM)));
     expectConfig("classic/OWNERS", createConfig(true, owners(USER_A_EMAIL_COM, USER_B_EMAIL_COM)));
 
-    creatingPatchList(Arrays.asList("classic/file.txt"));
+    creatingDiffList(Arrays.asList("classic/file.txt"));
     replayAll();
 
-    PathOwners owners2 = new PathOwners(accounts, repository, branch, patchList);
+    PathOwners owners2 = new PathOwners(accounts, repository, branch, diffList);
     Set<Account.Id> ownersSet2 = owners2.get().get("classic/OWNERS");
 
     // in this case we are inheriting the acct3 from /OWNERS
@@ -77,10 +77,10 @@ public class PathOwnersTest extends ClassicConfig {
     expectConfig("dir/OWNERS", createConfig(true, owners(USER_B_EMAIL_COM)));
     expectConfig("dir/subdir/OWNERS", createConfig(true, owners(USER_A_EMAIL_COM)));
 
-    creatingPatchList(Arrays.asList("dir/subdir/file.txt"));
+    creatingDiffList(Arrays.asList("dir/subdir/file.txt"));
     replayAll();
 
-    PathOwners owners = new PathOwners(accounts, repository, branch, patchList);
+    PathOwners owners = new PathOwners(accounts, repository, branch, diffList);
     Set<Account.Id> ownersSet = owners.get().get("dir/subdir/OWNERS");
 
     assertEquals(3, ownersSet.size());
diff --git a/owners-common/src/test/java/com/googlesource/gerrit/owners/common/RegexTest.java b/owners-common/src/test/java/com/googlesource/gerrit/owners/common/RegexTest.java
index b68ec99..7ae5de0 100644
--- a/owners-common/src/test/java/com/googlesource/gerrit/owners/common/RegexTest.java
+++ b/owners-common/src/test/java/com/googlesource/gerrit/owners/common/RegexTest.java
@@ -136,7 +136,7 @@ public class RegexTest extends Config {
     expectConfig("OWNERS", parentConfig);
     expectConfig("project/OWNERS", childConfig);
 
-    creatingPatchList(
+    creatingDiffList(
         Arrays.asList(
             "project/file.txt", // matches exact in
             // project owners d,e
@@ -148,7 +148,7 @@ public class RegexTest extends Config {
     replayAll();
 
     // function under test
-    PathOwners owners = new PathOwners(accounts, repository, branch, patchList);
+    PathOwners owners = new PathOwners(accounts, repository, branch, diffList);
 
     // assertions on classic owners
     Set<Account.Id> ownersSet = owners.get().get("project/OWNERS");
@@ -241,10 +241,10 @@ public class RegexTest extends Config {
 
     expectConfig("OWNERS", configString);
     expectNoConfig("project/OWNERS");
-    creatingPatch("project/file.sql", "another.txt");
+    creatingDiff("project/file.sql", "another.txt");
     replayAll();
 
-    PathOwners owners = new PathOwners(accounts, repository, branch, patchList);
+    PathOwners owners = new PathOwners(accounts, repository, branch, diffList);
 
     Set<String> ownedFiles = owners.getFileOwners().keySet();
     assertThat(ownedFiles).containsExactly("project/file.sql");
diff --git a/owners/src/main/java/com/googlesource/gerrit/owners/OwnersStoredValues.java b/owners/src/main/java/com/googlesource/gerrit/owners/OwnersStoredValues.java
index f721539..7030a84 100644
--- a/owners/src/main/java/com/googlesource/gerrit/owners/OwnersStoredValues.java
+++ b/owners/src/main/java/com/googlesource/gerrit/owners/OwnersStoredValues.java
@@ -16,7 +16,7 @@
 
 package com.googlesource.gerrit.owners;
 
-import com.google.gerrit.server.patch.PatchList;
+import com.google.gerrit.server.patch.filediff.FileDiffOutput;
 import com.google.gerrit.server.rules.StoredValue;
 import com.google.gerrit.server.rules.StoredValues;
 import com.googlecode.prolog_cafe.lang.Prolog;
@@ -25,6 +25,7 @@ import com.googlesource.gerrit.owners.common.PathOwners;
 import org.eclipse.jgit.lib.Repository;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import java.util.Map;
 
 /** StoredValues for the Gerrit OWNERS plugin. */
 public class OwnersStoredValues {
@@ -41,10 +42,10 @@ public class OwnersStoredValues {
         new StoredValue<PathOwners>() {
           @Override
           protected PathOwners createValue(Prolog engine) {
-            PatchList patchList = StoredValues.PATCH_LIST.get(engine);
+	    Map<String, FileDiffOutput> diffList = StoredValues.DIFF_LIST.get(engine);
             Repository repository = StoredValues.REPOSITORY.get(engine);
             String branch = StoredValues.getChange(engine).getDest().branch();
-            return new PathOwners(accounts, repository, branch, patchList);
+            return new PathOwners(accounts, repository, branch, diffList);
           }
         };
   }
-- 
2.34.0

