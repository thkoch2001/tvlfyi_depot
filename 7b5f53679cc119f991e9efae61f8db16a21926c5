{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1b3aedd7_51fd212e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2022-11-17T03:32:39Z",
      "side": 1,
      "message": "LGTM but please see the issue below about signature ambiguity.",
      "revId": "7b5f53679cc119f991e9efae61f8db16a21926c5",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a360e02_aed7a800",
        "filename": "tvix/store/protos/pathinfo.proto",
        "patchSetId": 18
      },
      "lineNbr": 62,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2022-11-17T03:32:39Z",
      "side": 1,
      "message": "If a `narinfo` file has more than one `NarHash` line, cppnix will silently ignore all but the last one.\n\nThis is important, because a `Signature` signs the `NarHash`.\n\nIf we allow multiple `NarHash` lines, we have to explain *which* of them is signed by (each) signature.  I see three possible solutions:\n\n1. Delete `repeated` from this line.\n\n2. Leave `repeated`, but imitate cppnix\u0027s behavior (silently ignore all but the *last* `element of `nar_hashes`), and add a comment documenting this.\n\n3. Move `repeated Signature signatures` from `message NARInfo` into `message NarHash`.  Then it is unambiguous which `NarHash` a given `Signature` is signing.\n\n#1 is the simplest.  #3 lets us support multiple `NarHashes` (including, e.g. ipfs-hashes) in the future without a protocol change.  I personally lean towards #3, but any of these (or something else entirely) is fine too.",
      "revId": "7b5f53679cc119f991e9efae61f8db16a21926c5",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}