{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b739a305_7d83c7af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2023-09-13T12:25:14Z",
      "side": 1,
      "message": "I just did this for the blob service, I want to get some more feedback before making similar changes to the other services.\n\nThere\u0027s also probably some code we could split out to share between the 3 services since the socket/gRPC setup code will be mostly the same.",
      "revId": "ce4b9fd576e488fe185971c88b27ae5d9377286b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "382d82cd_cbf7a75a",
        "filename": "tvix/store/src/blobservice/grpc.rs",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2023-09-13T12:25:14Z",
      "side": 1,
      "message": "I really don\u0027t like this. The problem is we need to test the gRPC implementation of the BlobService. So we spin up something like this:\n\n```\n(1 [test client]) -\u003e (2 [gRPC server] -\u003e [gRPC client]) -\u003e (3 [gRPC server] -\u003e [MemoryBlobService])\n```\n\nThe problem is we need to ensure the `MemoryBlobService`+gRPC server (3) are kept alive for the duration of the test, but we can\u0027t encode the ownership properly because Rust doesn\u0027t know that (2) depends on (3) since their relationship is through a unix socket.\n\nOpen to ideas, going to ponder this a little more",
      "revId": "ce4b9fd576e488fe185971c88b27ae5d9377286b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}