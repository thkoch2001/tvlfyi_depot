{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4d751b13_0720d8c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-07T10:11:40Z",
      "side": 1,
      "message": "s/Boilercode/boilerplate? ðŸ˜„",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17e33b4c_3a12ca41",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000110
      },
      "writtenOn": "2024-06-10T11:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d751b13_0720d8c4",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9142ba99_540b3bfe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-07T10:11:40Z",
      "side": 1,
      "message": "I\u0027m not 100% sold on using the (re)exported `tracing` crate in all library code. It might be a bit confusing why we use the re-export, importing `tracing::â€¦` is quite common in other code.\n\nI can be convinced to one thing or the other, but if we use the re-export we should definitely document a bit more why we\u0027re doing it that way.",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8267b7f5_8cfc0fd6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000110
      },
      "writtenOn": "2024-06-10T11:59:53Z",
      "side": 1,
      "message": "Yeah, i am also no longer convinced that is a great idea for this project. First i thought it might makes sense to just expose `tracing` as well as `tracing-indicatif` so you don\u0027t have to define all 3 in each Cargo.toml but I it only makes sense to use this for  this for projects that actually need `tvix-tracing` (right now) which are only the crates that result in an executable. The glue crate e.g. doesn\u0027t need `tvix-tracing` so its easier to just use `tracing` directly. But now we have two different ways to use `tracing` which might just only be confusing.\nAnother thing is that `tracing::instrument` uses `tracing::instrument::Instrumented`, which then means we also have to include `tvix_tracing::tracing:self` also kinda annoying.\nI would just revert that export, if that works for you",
      "parentUuid": "9142ba99_540b3bfe",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7075ca3a_a4a2991e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000090
      },
      "writtenOn": "2024-06-07T17:24:45Z",
      "side": 1,
      "message": "This change is missing the nix src filtering and the features powerset bits:\n\nYou can apply this diff\n```\ndiff --git a/tvix/default.nix b/tvix/default.nix\nindex edcae8dd0..e1b8781ba 100644\n--- a/tvix/default.nix\n+++ b/tvix/default.nix\n@@ -128,6 +128,10 @@ let\n         src \u003d filterRustCrateSrc { root \u003d prev.src.origSrc; };\n       };\n \n+      tvix-tracing \u003d prev: {\n+        src \u003d filterRustCrateSrc { root \u003d prev.src.origSrc; };\n+      };\n+\n       nix-compat \u003d prev: {\n         src \u003d filterRustCrateSrc rec {\n           root \u003d prev.src.origSrc;\ndiff --git a/tvix/tracing/default.nix b/tvix/tracing/default.nix\nnew file mode 100644\nindex 000000000..a4fe3a5d9\n--- /dev/null\n+++ b/tvix/tracing/default.nix\n@@ -0,0 +1,11 @@\n+{ depot, lib, ... }:\n+\n+(depot.tvix.crates.workspaceMembers.tvix-tracing.build.override {\n+  runTests \u003d true;\n+}).overrideAttrs (old: rec {\n+  meta.ci.targets \u003d lib.filter (x: lib.hasPrefix \"with-features\" x || x \u003d\u003d \"no-features\") (lib.attrNames passthru);\n+  passthru \u003d depot.tvix.utils.mkFeaturePowerset {\n+    inherit (old) crateName;\n+    features \u003d [ \"otlp\" ];\n+  };\n+})\n``",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48b1cfe5_3562c244",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000090
      },
      "writtenOn": "2024-06-07T17:27:21Z",
      "side": 1,
      "message": "I messed it up with the markdown (???)",
      "parentUuid": "7075ca3a_a4a2991e",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "904479a9_8e96ab08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000090
      },
      "writtenOn": "2024-06-07T17:29:14Z",
      "side": 1,
      "message": "```\ndiff --git a/tvix/default.nix b/tvix/default.nix\nindex edcae8dd0..e1b8781ba 100644\n--- a/tvix/default.nix\n+++ b/tvix/default.nix\n@@ -128,6 +128,10 @@ let\n         src \u003d filterRustCrateSrc { root \u003d prev.src.origSrc; };\n       };\n \n+      tvix-tracing \u003d prev: {\n+        src \u003d filterRustCrateSrc { root \u003d prev.src.origSrc; };\n+      };\n+\n       nix-compat \u003d prev: {\n         src \u003d filterRustCrateSrc rec {\n           root \u003d prev.src.origSrc;\ndiff --git a/tvix/tracing/default.nix b/tvix/tracing/default.nix\nnew file mode 100644\nindex 000000000..a4fe3a5d9\n--- /dev/null\n+++ b/tvix/tracing/default.nix\n@@ -0,0 +1,11 @@\n+{ depot, lib, ... }:\n+\n+(depot.tvix.crates.workspaceMembers.tvix-tracing.build.override {\n+  runTests \u003d true;\n+}).overrideAttrs (old: rec {\n+  meta.ci.targets \u003d lib.filter (x: lib.hasPrefix \"with-features\" x || x \u003d\u003d \"no-features\") (lib.attrNames passthru);\n+  passthru \u003d depot.tvix.utils.mkFeaturePowerset {\n+    inherit (old) crateName;\n+    features \u003d [ \"otlp\" ];\n+  };\n+})\n```",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5f83bc4_892807c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000110
      },
      "writtenOn": "2024-06-10T11:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "904479a9_8e96ab08",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f59d56c_350886ff",
        "filename": "tvix/tracing/Cargo.toml",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-07T10:11:40Z",
      "side": 1,
      "message": "```suggestion\ntracing \u003d { version \u003d \"0.1.40\", features \u003d [\"max_level_trace\", \"release_max_level_info\"] }\n```\n\nâ€¦ at least that\u0027s what was set in tvix/cli/Cargo.toml before.",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dba29845_39237621",
        "filename": "tvix/tracing/Cargo.toml",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000110
      },
      "writtenOn": "2024-06-10T11:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f59d56c_350886ff",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22351ec7_1ca5cfbd",
        "filename": "tvix/tracing/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-07T10:11:40Z",
      "side": 1,
      "message": "```suggestion\n// using a macro_rule here because of the complex return type\n```",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8715f372_e20d8a2e",
        "filename": "tvix/tracing/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000110
      },
      "writtenOn": "2024-06-10T11:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22351ec7_1ca5cfbd",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30750897_e3a09b8a",
        "filename": "tvix/tracing/src/lib.rs",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-07T10:11:40Z",
      "side": 1,
      "message": "At some point, we might want to use some builder pattern here, and then have the otlp config just another conditional configure function on that *Builder struct.\n\nThough it\u0027s probably fine as it is right now, and can be done in a followup CL, once/if we extend the complexity in here.",
      "revId": "c5e707186dc02c95f346e662eb1ff345ef8d4cde",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}