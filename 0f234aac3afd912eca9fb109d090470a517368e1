{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f96afd8a_e6e4ea6b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T20:11:00Z",
      "side": 1,
      "message": "Not totally true, we discovered they had it internally but they didn\u0027t want to expose it from the crate it was.\nThe problem is that just this is hell.",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12ef7b5c_969a1e62",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-09-15T21:00:44Z",
      "side": 1,
      "message": "I added something around these lines, but skipped the hell part.",
      "parentUuid": "f96afd8a_e6e4ea6b",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3edfcffa_bac691a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T20:11:00Z",
      "side": 1,
      "message": "Looks good to me modulo testing.",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d1bffcd_ea2f0092",
        "filename": "tvix/store/src/blobservice/dumb_seeker.rs",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T20:11:00Z",
      "side": 1,
      "message": "Explain why we are pinning only `r` and not `pos`, `bytes_to_skip` even though this is safe.",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e176a309_aa5e776a",
        "filename": "tvix/store/src/blobservice/dumb_seeker.rs",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T21:09:17Z",
      "side": 1,
      "message": "Let\u0027s explain it.\n\n`NaiveSeeker` itself is pinned somewhere and not allowed to move, though\nits fields could potentially be pinned or unpinned according to https://doc.rust-lang.org/std/pin/#pinning-is-not-structural-for-field\n\nIn this situation, we want to ensure that neither `pos` neither `bytes_to_skip` are pinned, and we will want to ensure we never write `pin!(pos)` or similar to ensure this invariant to be true.\n\nFor `r`, it is more complicated, we definitely may be pinning it in some instances, so let\u0027s mark it as pinned all the time.\n\nAnyway, we need to use it as pinned, so it all works well for us.",
      "parentUuid": "2d1bffcd_ea2f0092",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a139fcc1_0d335b1e",
        "filename": "tvix/store/src/blobservice/dumb_seeker.rs",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-16T14:59:21Z",
      "side": 1,
      "message": "Another attempt:\n\n`NaiveSeeker` is itself pinned by callers, and we do not need to concern ourselves regarding that.\n\nThough, its fields as per https://doc.rust-lang.org/std/pin/#pinning-is-not-structural-for-field can be pinned or unpinned.\n\nSo we need to go over each field and choose our policy carefully.\n\nThe obvious cases are the bookkeeping integers we keep in the structure, those are private and not shared to anyone, we never build a `Pin\u003c\u0026mut X\u003e` out of them at any point, therefore, we can safely never mark them as pinned. Of course, it is expected that no developer here attempt to `pin!(pos)` to pin them because it makes no sense. If they have to become pinned, they should be marked `#[pin]` and we need to discuss it.\n\nSo the bookkeeping integers are in the right state with respect to their pinning status. The projection should offer direct access.\n\nOn the `r` field, i.e. a `BufReader\u003cR\u003e`, given that https://docs.rs/tokio/latest/tokio/io/struct.BufReader.html#impl-Unpin-for-BufReader%3CR%3E is available, even a `Pin\u003c\u0026mut BufReader\u003cR\u003e\u003e` can be safely moved.\n\nThe only care we should have regards the internal reader itself, i.e. the `R` instance, see that Tokio decided to `#[pin]` it too: https://docs.rs/tokio/latest/src/tokio/io/util/buf_reader.rs.html#29\n\nIn general, there\u0027s no `Unpin` instance for `R: tokio::io::AsyncRead` (see https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html).\n\nTherefore, we could keep it unpinned and pin it in every call site whenever we need to call `poll_*` which can be confusing to the non-expert developer and we have a fair share amount of situations where the `BufReader` instance is naked, i.e. in its `\u0026mut BufReader\u003cR\u003e` form, this is annoying because it could lead to expose the naked `R` internal instance somehow and would produce a risk of making it move unexpectedly.\n\nWe choose the path of the least resistance as we have no reason to have access to the raw `BufReader\u003cR\u003e` instance, we just `#[pin]` it too and enjoy its `poll_*` safe APIs and push the unpinning concerns to the internal implementations themselves, which studied the question longer than us.",
      "parentUuid": "e176a309_aa5e776a",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "776e46b0_4604b6de",
        "filename": "tvix/store/src/blobservice/dumb_seeker.rs",
        "patchSetId": 8
      },
      "lineNbr": 12,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T20:11:00Z",
      "side": 1,
      "message": "I prefer `NaiveSeeker` than the pejorative term \"dumb\".",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f10e387_a070de30",
        "filename": "tvix/store/src/blobservice/dumb_seeker.rs",
        "patchSetId": 8
      },
      "lineNbr": 12,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-09-15T21:00:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "776e46b0_4604b6de",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21de931b_5b672f4b",
        "filename": "tvix/store/src/blobservice/dumb_seeker.rs",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2023-09-17T12:50:18Z",
      "side": 1,
      "message": "I was having some trouble where `seek` that requires multiple reads would get stuck. I added some logging and `poll_complete` was polled once but never polled again.\n\nI think the [docs](https://doc.rust-lang.org/stable/std/task/enum.Poll.html#variant.Pending) about `Poll::Pending` are relevant:\n\n\u003e When a function returns Pending, the function must also ensure that the current task is scheduled to be awoken when progress can be made.\n\nWhat happens here is we return `Poll::Pending` but we don\u0027t do anything to ensure that this task is woken up again.\n\nI did some testing and one solution to this is to put the `poll_read` in a loop, and in this case trigger another `poll_read` instead of returning `Poll::Pending`. Likely the call to `poll_read` will end up returning `Poll::Pending`, but this time the I/O operation will be registered with the waker so the future will get polled again and things will work as expected",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eb2479b_2640a719",
        "filename": "tvix/store/src/blobservice/dumb_seeker.rs",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1000085
      },
      "writtenOn": "2023-09-17T12:58:36Z",
      "side": 1,
      "message": "Here\u0027s a test case to demonstrate the issue:\n```\n    #[tokio::test]\n    async fn seek() {\n        let buf \u003d vec![0u8; 4096];\n        let reader \u003d Cursor::new(\u0026buf);\n        let mut seeker \u003d NaiveSeeker::new(reader);\n        seeker.seek(SeekFrom::Start(4000)).await.unwrap();\n    }\n```\n\nThis seek will require multiple `poll_reads` since we use a 1024 byte internal buffer when doing the seek.\n\nAs-is this test will hang indefinitely.",
      "parentUuid": "21de931b_5b672f4b",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5739bcd_5234a3da",
        "filename": "tvix/store/src/blobservice/dumb_seeker.rs",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-17T13:19:54Z",
      "side": 1,
      "message": "Much agreed, the solution suggested is not that bad, either case, we have to kind of do our bookkeeping ourselves and call `cx` or pass it to someone else who knows how to call it, e.g. internal poll_read impl.",
      "parentUuid": "4eb2479b_2640a719",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faa6577f_846ae6c4",
        "filename": "tvix/store/src/blobservice/grpc.rs",
        "patchSetId": 8
      },
      "lineNbr": 393,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T20:11:00Z",
      "side": 1,
      "message": "this is absolutely random, isn\u0027t it?\nplease invest in proper exp backoff or add a TODO to do it \"urgently\"\n\neven if this is for a test, you should avoid this because if your testing machine is under high load, some stuff may happen and you won\u0027t be happy\n\noverall, you should define a global target timeout for the test",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ae2a0b0_f1eaa340",
        "filename": "tvix/store/src/blobservice/grpc.rs",
        "patchSetId": 8
      },
      "lineNbr": 393,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-09-15T21:00:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "faa6577f_846ae6c4",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc604328_e6372d65",
        "filename": "tvix/store/src/blobservice/memory.rs",
        "patchSetId": 8
      },
      "lineNbr": 111,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T20:11:00Z",
      "side": 1,
      "message": "let\u0027s explain why we don\u0027t need to poll shutdown, even if it\u0027s obvious to us",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54b4c8bd_dacc1278",
        "filename": "tvix/store/src/blobservice/memory.rs",
        "patchSetId": 8
      },
      "lineNbr": 111,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-09-15T21:00:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc604328_e6372d65",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "506db26c_efcf7818",
        "filename": "tvix/store/src/blobservice/memory.rs",
        "patchSetId": 8
      },
      "lineNbr": 111,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T21:10:17Z",
      "side": 1,
      "message": "for sled: this is the same, closing a sled connection is closing a file handle, right?\n\nfor grpc: unknown?",
      "parentUuid": "54b4c8bd_dacc1278",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9547ad99_2e27bab9",
        "filename": "tvix/store/src/blobservice/sled.rs",
        "patchSetId": 8
      },
      "lineNbr": 140,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-09-15T20:11:00Z",
      "side": 1,
      "message": "explain why this is obvious that we don\u0027t need to poll for shutdowns",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb1c2581_dca7eb92",
        "filename": "tvix/store/src/blobservice/sled.rs",
        "patchSetId": 8
      },
      "lineNbr": 140,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-09-15T21:00:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9547ad99_2e27bab9",
      "revId": "0f234aac3afd912eca9fb109d090470a517368e1",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}