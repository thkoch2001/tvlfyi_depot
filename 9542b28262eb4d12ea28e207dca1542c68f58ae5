{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6e674467_18f1ec4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-09-14T23:44:31Z",
      "side": 1,
      "message": "Okay, definitely ready for review now.\n\nPlease note the doc-comment on CatchableErrorKind -- in fact, it\u0027s probably best to read that comment first before reviewing anything else.",
      "revId": "9542b28262eb4d12ea28e207dca1542c68f58ae5",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83acf89e_5e88b4f9",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 11
      },
      "lineNbr": 232,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-09-15T00:55:37Z",
      "side": 1,
      "message": "This \"idiom\" occurs pretty often.  It might be worth defining a macro for it.  That would give us back the `?`-syntax capabilities that are lost by the switch to using `Result\u003cResult\u003cT,_\u003e,_\u003e`.",
      "range": {
        "startLine": 228,
        "startChar": 1,
        "endLine": 232,
        "endChar": 0
      },
      "revId": "9542b28262eb4d12ea28e207dca1542c68f58ae5",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c0638a5_03854923",
        "filename": "tvix/eval/src/errors.rs",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-09-16T14:02:22Z",
      "side": 1,
      "message": "If I understand this correctly, that is for cases where we *want* the catchable error to propagate to ErrorKind?\n\nWith the instance `impl From\u003cCatchableErrorKind\u003e for ErrorKind`, that should just work if you use a double question mark, no?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 38,
        "endChar": 0
      },
      "revId": "9542b28262eb4d12ea28e207dca1542c68f58ae5",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1f80793_f4d46fd9",
        "filename": "tvix/eval/src/errors.rs",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-09-18T23:18:25Z",
      "side": 1,
      "message": "\u003e With the instance `impl From\u003cCatchableErrorKind\u003e for ErrorKind`\n\nThat instance does not exist, for the reasons explained in the first line of the block-comment above.\n\n`ErrorKind` is the type of *uncatchable* errors.  Maybe I should rename it.\n\nHaving `ErrorKind` be the type of *all* errors has two problems: the redundant representation problem (explained above) and the fact that it makes it much too easy to accidentally turn a catchable error into an uncatchable error.",
      "parentUuid": "4c0638a5_03854923",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 38,
        "endChar": 0
      },
      "revId": "9542b28262eb4d12ea28e207dca1542c68f58ae5",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d40365aa_7ad6dc59",
        "filename": "tvix/eval/src/errors.rs",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-09-14T23:45:42Z",
      "side": 1,
      "message": "Reviewers: read this first.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 40,
        "endChar": 3
      },
      "revId": "9542b28262eb4d12ea28e207dca1542c68f58ae5",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}