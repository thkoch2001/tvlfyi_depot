{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d363bcbc_3fe05db1",
        "filename": "tvix/store/src/bin/tvix-store.rs",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-03-02T16:05:24Z",
      "side": 1,
      "message": "Shouldn\u0027t we use OLTP exporter instead of jaeger?\n\nIdeally, Due to the vendor neutral nature of otel, I would have the following design.\n\nAPP -\u003e Otel Collector -\u003e Jaeger/Prometheus/Zipkin",
      "revId": "32f0e197057fe84669da6b3be4ba005538ca9b23",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b609461_42b7636f",
        "filename": "tvix/store/src/bin/tvix-store.rs",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-03-02T22:29:12Z",
      "side": 1,
      "message": "I didn\u0027t really have a preference. In reality, most trace collectors (at least grafana-agent) accepted all formats anyways, so I picked something to start with.\n\nThis was the example I could find and easily slap in, and have jaeger on the other side receive it, without the need of any intermediate receiver. In that example, it didn\u0027t look as if Jaeger can receive OTLP directly as well\n\nIt seems this has changed recently, and it now does:\n\nhttps://www.jaegertracing.io/docs/1.42/getting-started/#all-in-one\n\nThe invocation thereâ€¦\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT\u003d:9411 \\\n  -e COLLECTOR_OTLP_ENABLED\u003dtrue \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  -p 14250:14250 \\\n  -p 14268:14268 \\\n  -p 14269:14269 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:1.42\n```\ndefinitely has the otlp-http and otlp-grpc ports configured.\n\nSo yes, moving to otlp makes sense. I should also make use of the tokio runtime to batch requests, so sending these traces stays out of the critical path.",
      "parentUuid": "d363bcbc_3fe05db1",
      "revId": "32f0e197057fe84669da6b3be4ba005538ca9b23",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7b2ec5d_fbc80f4b",
        "filename": "tvix/store/src/bin/tvix-store.rs",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-03-03T04:45:32Z",
      "side": 1,
      "message": "Yup, We can look into sending batch requests. \n\nI can help to setup the config for otel-collector to receive traces.",
      "parentUuid": "1b609461_42b7636f",
      "revId": "32f0e197057fe84669da6b3be4ba005538ca9b23",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "098a218a_d8cbca2f",
        "filename": "tvix/store/src/bin/tvix-store.rs",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-03-02T16:06:38Z",
      "side": 1,
      "message": "Maybe have the service name as `tvix.store`? This way it would be easier to search and we can extend it with `tvix.eval` and `tvix.cli`.",
      "revId": "32f0e197057fe84669da6b3be4ba005538ca9b23",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e931569_cce2d130",
        "filename": "tvix/store/src/bin/tvix-store.rs",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-03-02T22:29:12Z",
      "side": 1,
      "message": "Is there some documentation / best practices around naming of these things? E.g. why is `tvix.store` easier to search for than `tvix-store`?\n\nRelated, I couldn\u0027t get the `target` attribute (https://docs.rs/tracing/latest/tracing/attr.instrument.html#overriding-span-attributes) to appear in traces being sent (with Jaeger), which is why I now did override the `name` field instead. Was I doing something wrong / is this a limitation of `otlp_jaeger`?",
      "parentUuid": "098a218a_d8cbca2f",
      "revId": "32f0e197057fe84669da6b3be4ba005538ca9b23",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34c733d4_1d21ff3e",
        "filename": "tvix/store/src/bin/tvix-store.rs",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-03-03T04:45:32Z",
      "side": 1,
      "message": "This [article] is a good read for naming things in otel. \n\nIdeally, It should send the target field. We can try with an otel-collector. The receivers should not dictate what attributes can be received and what not. \n\nIn golang, I was sending ServiceName and SpanName for the traces. \nThe span could be `DemoController.DemoService.DemoRepository.UUID`. This is just a suggestion and we can follow other schemes If preset.\n\n[article]: https://opentelemetry.io/docs/reference/specification/common/attribute-naming/",
      "parentUuid": "1e931569_cce2d130",
      "revId": "32f0e197057fe84669da6b3be4ba005538ca9b23",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}