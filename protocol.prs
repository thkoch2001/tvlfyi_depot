version 1 .

# Gatekeeper step to access a Nix repository.
RepoResolveStep = <nix-repo @detail RepoResolveDetail> .
RepoResolveDetail = {

  # Path to a repository to import.
  # This string is evaluated so it can include "<â€¦>" paths.
  import: string

  # List of strings corresponding to entries in NIX_PATH.
  # For example:
  #  [ "nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixos"
  #    "nixos-config=/etc/nixos/configuration.nix"
  #    "/nix/var/nix/profiles/per-user/root/channels"
  #  ]
  lookupPath: [string ...]

  # Store URI selector, use "auto" unless you know exactly what you need.
  store: string
} & @args RepoArgs .

# Arguments to call the imported expression with if it is a function.
RepoArgs = @present { args: any } / @absent {} .

# Common error type.
Error = <error @message string>.

# Represents a Nix derivation.
# The @storePath can be realized as store object from @drvPath.
#
# If an attrset value resulting from evaluation has a "drvPath" attribute
# then a drv record is returned in place of the attrset. Returning the
# attrset is not feasible because otherwise lazy values would explode into
# complete dependency trees.
Derivation = <drv @drvPath string @storePath string> .

AttrSet = {symbol: any ...:...} .
