#!/usr/bin/env -S syndicate-server --config

let ?nixConfig = {
    command-path: [ "/run/current-system/sw/bin" ]
    lookupPath: [
      "nixpkgs=/home/repo/nixpkgs/channel",
      "nixos-config=/etc/nixos/configuration.nix",
      "/nix/var/nix/profiles/per-user/root/channels",
    ]
    options: { }
    store-uri: "auto"
  }

let ?nixLog = dataspace
$nixLog ?? ?line [
  $log ! <log "nix-results-log" { line: $line }>
]

let ?results = dataspace
$results ? ?any [
  $log ! <log "nix-results" { line: $any }>
]

<q <service nix $nixConfig>>
? <a <service nix $nixConfig <accepted ?nix>>> [

  $nix <eval "builtins.trace \"This is only a test.\" builtins.nixVersion" $results>

  $nix <eval-file "/home/emery/src/nix_actor/test.nix" { time: builtins.currentTime } $results>

  # Realise all observed store derivations.
  $results ? <ok <drv ?drvPath>> [
    $nix  <realise $drvPath $nixLog $results>
  ]

]

? <q <service nix ?detail>> [
  $log ! <log "service" { line: "nix service requested" }>
  <require-service <daemon nix-actor>>
  ? <service-object <daemon nix-actor> ?obj> [
    let ?rewriter = <* $config [<rewrite ?resp <a <service nix $detail $resp>>>]>
    $obj <resolve <nix-actor $detail> $rewriter>
  ]
]

# The authors build system creates this file.
<require-service <config-watcher "/home/emery/src/config/built/nix-actor.pr" $.>>

? <built nix-actor ?path ?sum> [
  <daemon nix-actor {
    argv: [ $path ]
    clearEnv: #t
    env: {
      BUILD_SUM: $sum
    }
    protocol: application/syndicate
  }>
]
