{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "70496d25_e91d63fe",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 702,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-04-04T11:16:08Z",
      "side": 1,
      "message": "Prose: write an overview of what is this function, what does it deal with (valid and sane context elements) and compare to what Nix does \"generally\".",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7c96f89_b785e6ae",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 702,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-04-04T16:47:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70496d25_e91d63fe",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9395aee1_ab518e22",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-03-25T00:30:39Z",
      "side": 1,
      "message": "@flokli@flokli.de Before I go and invent a solution, please take a look, read carefully and let me know how you envision this in the architecture in your mind.",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5e710a8_c2e3b674",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-03-25T17:32:18Z",
      "side": 1,
      "message": "Why do we only need the invariant checks for this builtin, and not others too?\n\n`appendContext` lives in `tvix-eval`, not `tvix-glue`, so the only way it could check this is through `EvalIO`, but this has other implications (aka triggering builds and blocking on them), so I need to understand the reasoning behind these invariant checks.",
      "parentUuid": "9395aee1_ab518e22",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22f96101_0e90b153",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-03-28T19:35:05Z",
      "side": 1,
      "message": "This is a safe builtin to produce context, the other builtin doing that is derivation and we do those invariant checks because we produce the valid store pathsâ€¦\n\nIf we don\u0027t do those invariant checks, we are implementing `unsafeAppendContext` not `appendContext`, please read the documentation of `appendContext`.",
      "parentUuid": "b5e710a8_c2e3b674",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a2868a_35dec92c",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000034
      },
      "writtenOn": "2024-03-30T20:35:08Z",
      "side": 1,
      "message": "@tvl@lahfa.xyz The check done is extremely simple: It seems we only check that the \"store path\" has the prefix `builtins.storeDir` (checked by `isStorePath`) followed by 32 nix base32 valid chars (checked by the `StorePath` constructor). You can actually have completely bogus context:\n\n    nix-instantiate --eval --readonly-mode -E \u0027builtins.getContext (builtins.appendContext \"\" { \"/nix/store/feededefbeef00000000000000000000\" \u003d {\n path \u003d true; }; })\u0027\n \nAlso `/nix/store/feededefbeef00000000000000000000.drv` passes the `isDerivation` check.\n \nSuch context will only cause a failure when the evaluator requests the context to be realised for whatever reason, e.g. when we try to build a derivation that stems from such a context. (In C++ Nix `ensurePath` is only called if the evaluator is not in read-only mode. I don\u0027t think we need to copy this necessarily, though? I guess the consequence of this is that it is impossible to create a derivation with such bogus dependencies, but we can probably also prevent that by pushing the check to something we talk to via RPC?)",
      "parentUuid": "22f96101_0e90b153",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f274b768_757bcf48",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-03-31T12:38:38Z",
      "side": 1,
      "message": "@sternenseemann@systemli.org Whew, Nix is really stupid on that. :/\nI don\u0027t know if we need to be dumber than Nix on that, but given the situation, we can keep it in eval, perform store path checks and move on.\n\n@flokli@flokli.de Is that okay with you?\n\nEither way, my intention is still to have a \"stricter\" mode of operations where we do those invariant checks so that we can do \"stricter\" evaluation in nixpkgs and ensure no fuckery is going on (and not waiting for realization to show that).",
      "parentUuid": "88a2868a_35dec92c",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "579f0b2c_ac9a04e3",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-04-04T11:16:08Z",
      "side": 1,
      "message": "Prose TODO:\n- Decompress \"What Nix is doing in terms of checks that Tvix is not currently checking.\"",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56c79315_ea8e979d",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-04-04T11:16:08Z",
      "side": 1,
      "message": "Meeting with @flokli@flokli.de we decided to write more prose in the TODO items to explain what we are doing, what Nix is doing.",
      "parentUuid": "f274b768_757bcf48",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c37c9911_dd9bd795",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-04-04T16:47:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "579f0b2c_ac9a04e3",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f670e304_5a99ae6c",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-03-25T00:30:39Z",
      "side": 1,
      "message": "@flokli@flokli.de Same for this check.",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f048ab5_66f42e4f",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-03-28T19:35:05Z",
      "side": 1,
      "message": "See answer above.",
      "parentUuid": "f670e304_5a99ae6c",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bacc076_7b6729ba",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1000034
      },
      "writtenOn": "2024-03-30T20:35:08Z",
      "side": 1,
      "message": "As mentioned, the derivation check is basically the store path check mentioned above plus a check of the extension.\n\nI think these checks could be implemented in the evaluator by adding a way to `EvalIO` for getting the store dir and the store drv extension (plus i guess hash format checks but sounds complicated?). They are purely textual!",
      "parentUuid": "2f048ab5_66f42e4f",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ac74722_ac6f6335",
        "filename": "tvix/eval/src/builtins/mod.rs",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2024-04-04T11:16:08Z",
      "side": 1,
      "message": "Resolved, see above.",
      "parentUuid": "2bacc076_7b6729ba",
      "revId": "ac2d3f77a8f6826d66b4405adafe28d368db0ff2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}