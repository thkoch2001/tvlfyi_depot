{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "914c5d58_8082557f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-08-11T04:52:38Z",
      "side": 1,
      "message": "Composition and the registry are library functions, which can explicitly also be implemented by third-party crates.\n\nAt least there, we should not thread through eyre, for the reasons described in https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations\n\nDuring composition, we have a \"stack\" around, and should be able to chain errors as we build things up.\n\nI wouldn\u0027t mind allowing to convert the resulting error to something that can be converted to eyre errors / reports, but I\u0027d be cautious making this API.",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2880ec3d_97a6584a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-08-11T14:26:57Z",
      "side": 1,
      "message": "they can be *implemented* by third-party crates, but they aren\u0027t *returned to* third party crates, which is the main issue with error types like eyre and anyhow.\n\npassing around Box\u003cdyn std::error::Error\u003e is a pretty strong antipattern in rust - as you have detected, it\u0027s extremely unergonomic and results in terrible user experience (with minimal reporting and context to errors, eg just getting \"url missing scheme\" or whatever if you pass a bad url to one of the four top-level URL options). eyre gets us error context, code tracing, span tracing, nice reporting, structured errors, etc. for \"free\".\n\nI really think we shouldn\u0027t be hamstringing the development and user experience of tvix-the-application just to cater to a hypothetical, nonexistent future third-party user.",
      "parentUuid": "914c5d58_8082557f",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c08ee07_2d87097f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-08-11T14:44:06Z",
      "side": 1,
      "message": "i also strongly feel that we should not be using `io::Result` in as many places as we are. if you ever construct an io::Result, something has gone horribly wrong",
      "parentUuid": "2880ec3d_97a6584a",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91f08b15_e403081d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-08-11T14:49:05Z",
      "side": 1,
      "message": "I\u0027m not saying I\u0027m happy with the error handling presently there, but the whole composition API was explicitly designed with the idea that people can bring their own *Service impls, which don\u0027t require changing any code in tvix-castore, where the composition machinery lives.\n\nSo all the API to register new *Service types, as well as the method to construct the hierarchy with a given config *is* public API, means we should not return `eyre::Result` from there, as this is will re-export `eyre::Result` as discouraged in in https://docs.rs/eyre/latest/eyre/#usage-recommendations-and-stability-considerations.\n\nTvix being \"bring your own stores\" is very similar to it being \"bring your own builtins\" - it\u0027s more than a hypothetical, noexistent future usecase.\n\nLet\u0027s find some sync time to unblock this.\n\nI\u0027m sure there\u0027s a way to get them in better shape, preserving composition construction information, without making them `eyere::Result` directly (but maybe providing some `impl From`.",
      "parentUuid": "2880ec3d_97a6584a",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbf87c2f_9b010999",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-08-11T14:55:31Z",
      "side": 1,
      "message": "\u003e i also strongly feel that we should not be using io::Result in as many places as we are. if you ever construct an io::Result, something has gone horribly wrong\n\nI agree, we should wrap io errors and attach some more context where useful - in addition to all the logging and tracing we have. Revamping the errors for castore/store components in general is another big topic on the list we should focus on.",
      "parentUuid": "91f08b15_e403081d",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c37c850_9b7bfd4f",
        "filename": "tvix/cli/default.nix",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-08-11T04:52:38Z",
      "side": 1,
      "message": "unrelated change (all the way to the end of the file)",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82054d1e_02591819",
        "filename": "tvix/cli/src/main.rs",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-08-11T04:52:38Z",
      "side": 1,
      "message": "I\u0027m no fan of the Result import, can we explicitly quality this further down? It\u0027s used in a single place.",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a81b771_3d0d77d1",
        "filename": "tvix/cli/src/main.rs",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-08-11T14:27:27Z",
      "side": 1,
      "message": "eyre::Result is nice in that it\u0027s explicitly compatible with std::result::Result.",
      "parentUuid": "82054d1e_02591819",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2966a5be_7de7d3e2",
        "filename": "web/tvixbolt/Cargo.nix",
        "patchSetId": 3
      },
      "lineNbr": 5976,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-08-11T04:52:38Z",
      "side": 1,
      "message": "same unrelated formatetr change",
      "revId": "5dd76f8ba45843ce8bb99656d618323f9b7bb78a",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}