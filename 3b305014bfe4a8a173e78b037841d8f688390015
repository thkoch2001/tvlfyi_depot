{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "158277bb_9367cacc",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 19,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T10:56:02Z",
      "side": 1,
      "message": "The lower part can probably also be a docstring.",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2289b63e_0e380957",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 19,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:51:53Z",
      "side": 1,
      "message": "I\u0027m not sure how, I wouldn\u0027t want to throw all this information at a user (even someone within tvix trying to use the composition module), so unless there\u0027s some way to have hidden docstrings I\u0027d rather keep it as a comment",
      "parentUuid": "158277bb_9367cacc",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efdf766f_4b52d3d9",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 19,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T14:33:15Z",
      "side": 1,
      "message": "Ok",
      "parentUuid": "2289b63e_0e380957",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e812989_5b4c8c4b",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 67,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T10:56:02Z",
      "side": 1,
      "message": "is it still possible to call this from the outside?",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab18f799_cbf21f63",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 67,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:40:55Z",
      "side": 1,
      "message": "yes, the private_bounds is outdated and I removed it now",
      "parentUuid": "1e812989_5b4c8c4b",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05220122_4a3968bb",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 92,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T10:56:02Z",
      "side": 1,
      "message": "move up",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfe39d29_7064b736",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 92,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:40:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05220122_4a3968bb",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da84bf55_05d0f335",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 146,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T10:56:02Z",
      "side": 1,
      "message": "is it possible to have the name of the store we tried to construct, at least in the Failed case?",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67783b30_a056eea0",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 146,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:40:55Z",
      "side": 1,
      "message": "I would rather add instrumentation in more places and learn how to use the instrumentation. Interpreting errors without tracing is already a pain in other places, so I should just learn how to use tracing.",
      "parentUuid": "da84bf55_05d0f335",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dae907e_8345ca5e",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 146,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T14:33:15Z",
      "side": 1,
      "message": "Tracing alone can only be used to poop out log lines etc., but having the instance_name as a field here allows for better programmatic error reporting too.\n\nWe can deal with this in a followup CL though.",
      "parentUuid": "67783b30_a056eea0",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cbd924d_302ca8a0",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 146,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T21:38:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9dae907e_8345ca5e",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bc79218_498806ba",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 152,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T10:56:02Z",
      "side": 1,
      "message": "that\u0027s if it panics in another thread? can we also just panic instead?",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf1f9071_2510621d",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 152,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:40:55Z",
      "side": 1,
      "message": "I don\u0027t get the question",
      "parentUuid": "6bc79218_498806ba",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dfbd4f6_712548d4",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 152,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T14:33:15Z",
      "side": 1,
      "message": "When do we construct the `Poisoned` kind? Can we instead just panic there too?",
      "parentUuid": "cf1f9071_2510621d",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "820589a7_aef0e04b",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 152,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T21:07:56Z",
      "side": 1,
      "message": "This type is needed as a placeholder. We use std::mem::replace further down to take the current instantiation state and replace it with Poisoned, and later swap it back. If we panic while determining the new state, the Poisoned error will remain there in the instantiation state (inside a Poisoned mutex, so other threads attempting to look at this would probably already panic while attempting to lock the mutex).",
      "parentUuid": "0dfbd4f6_712548d4",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8e7fe5e_09711c25",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 152,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T21:42:49Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "820589a7_aef0e04b",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16028ab8_8140b939",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 154,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T10:56:02Z",
      "side": 1,
      "message": "can we have a Box\u003cdyn Error\u003e here?",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e228dd54_6b7a108d",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 154,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:40:55Z",
      "side": 1,
      "message": "This must be clonable, but I made it Arc\u003cdyn Error\u003e now",
      "parentUuid": "16028ab8_8140b939",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a027db81_0c5cef9a",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 159,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T10:56:02Z",
      "side": 1,
      "message": "Can we have a typedef for the value in here? and does it need to be a hash set, or can it be on any IntoIter with these keys and values?",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7ddd2ce_55eae6d0",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 159,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:40:55Z",
      "side": 1,
      "message": "Yes and no, it is helpful to have a concrete type here from a user perspective,  because then the type of the deserialize() call before it can be inferred.",
      "parentUuid": "a027db81_0c5cef9a",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d40c5866_8ceb23a2",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 159,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T14:33:15Z",
      "side": 1,
      "message": "As for the typdef, I\u0027m thinking of a better name for the `DeserializeWithRegistry\u003cBox\u003cdyn ServiceBuilder\u003cOutput \u003d Arc\u003c…\u003e\u003e\u003e\u003e\u003e` part (and keep `T` as a generic around).\n\nWe can keep the IntoIter thing for later, and have a `from_iter` something thing.\nBut let\u0027s add a comment on why we\u0027re explicitly picking HashMap here.",
      "parentUuid": "a7ddd2ce_55eae6d0",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b08cc74_8ce2e3f3",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 159,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T21:07:56Z",
      "side": 1,
      "message": "I have added a from_iter variant and a comment about why we still want the HashMap variant.\nI don\u0027t think it\u0027s particularly high priority to add a typedef, since as can be seen in the examples it is never actually necessary to type out this type on the user side, and we only type it out once.",
      "parentUuid": "d40c5866_8ceb23a2",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3959371e_5f7851f6",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 21
      },
      "lineNbr": 159,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T21:42:49Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "3b08cc74_8ce2e3f3",
      "revId": "3b305014bfe4a8a173e78b037841d8f688390015",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}