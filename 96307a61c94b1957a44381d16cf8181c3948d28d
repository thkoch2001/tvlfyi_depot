{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5d912dc_5d60bcc8",
        "filename": "tvix/store/Cargo.toml",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-05-08T14:29:57Z",
      "side": 1,
      "message": "The bump seems to have caused this breakage here:\n\n```\nerror[E0277]: the trait bound `tokio::net::UnixStream: tokio::io::async_read::AsyncRead` is not satisfied\n   --\u003e store/src/directoryservice/grpc.rs:363:24\n    |\n363 |                 router.serve_with_incoming(uds_stream).await\n    |                        ^^^^^^^^^^^^^^^^^^^ the trait `tokio::io::async_read::AsyncRead` is not implemented for `tokio::net::UnixStream`\n    |\n    \u003d help: the following other types implement trait `tokio::io::async_read::AsyncRead`:\n              \u0026[u8]\n              \u0026mut T\n              Box\u003cT\u003e\n              Pin\u003cP\u003e\n              h2::codec::framed_write::FramedWrite\u003cT, B\u003e\n              hyper::server::tcp::addr_stream::AddrStream\n              hyper::upgrade::Upgraded\n              hyper_timeout::stream::TimeoutConnectorStream\u003cS\u003e\n            and 22 others\nnote: required by a bound in `Router::\u003cL\u003e::serve_with_incoming`\n   --\u003e /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/tonic-0.8.3/src/transport/server/mod.rs:635:13\n    |\n635 |         IO: AsyncRead + AsyncWrite + Connected + Unpin + Send + \u0027static,\n    |             ^^^^^^^^^ required by this bound in `Router::\u003cL\u003e::serve_with_incoming`\n\n```\n\nIt seems to only be a problem with unix domain sockets (which are currently only used in the tests, but we definitely want to use that to talk to a system-wide tvix store too)",
      "revId": "96307a61c94b1957a44381d16cf8181c3948d28d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "601d64c0_a53ecdc6",
        "filename": "tvix/store/Cargo.toml",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-05-08T15:48:40Z",
      "side": 1,
      "message": "This seems to have been fixed by keeping tokio as-is, and vendoring in the SyncReadStream implementation.",
      "parentUuid": "e5d912dc_5d60bcc8",
      "revId": "96307a61c94b1957a44381d16cf8181c3948d28d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21f23290_536ae6a1",
        "filename": "tvix/store/src/bin/tvix-store.rs",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-05-08T14:27:31Z",
      "side": 1,
      "message": "This currently panics with:\n\n```\n‚ùØ RUST_BACKTRACE\u003dfull cargo run -- daemon\n   Compiling tvix-store v0.1.0 (/home/flokli/dev/nixos/code.tvl.fyi-submit2/tvix/store)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.79s\n     Running `/home/flokli/dev/nixos/code.tvl.fyi-submit2/tvix/target/debug/tvix-store daemon`\n  2023-05-08T14:26:08.964969Z  INFO tvix_store: tvix-store listening on [::]:8000\n    at store/src/bin/tvix-store.rs:127\n\nthread \u0027main\u0027 panicked at \u0027there is no reactor running, must be called from the context of a Tokio 1.x runtime\u0027, /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.14.26/src/server/tcp.rs:130:24\nstack backtrace:\n   0:     0x55ee6fc29ee9 - \u003cstd::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display\u003e::fmt::h42f9975aea1f885b\n   1:     0x55ee6fc5700e - core::fmt::write::h9beb3954b4a99f50\n   2:     0x55ee6fc359b5 - std::io::Write::write_fmt::hbc80d95fb5e8bddc\n   3:     0x55ee6fc29ca5 - std::sys_common::backtrace::print::hde3adc649ab796a5\n   4:     0x55ee6fc3e1cf - std::panicking::default_hook::{{closure}}::h1b155cb607a5711e\n   5:     0x55ee6fc3de8c - std::panicking::default_hook::ha7737616cf1ba84a\n   6:     0x55ee6fc3e9fc - std::panicking::rust_panic_with_hook::h20d77b1fda5cd0cd\n   7:     0x55ee6fc2a259 - std::panicking::begin_panic_handler::{{closure}}::h6535bc5f76bd634a\n   8:     0x55ee6fc2a03c - std::sys_common::backtrace::__rust_end_short_backtrace::h4bbdd5aab6961944\n   9:     0x55ee6fc3e592 - rust_begin_unwind\n  10:     0x55ee6f137093 - core::panicking::panic_fmt::hf544f12170dd09fb\n  11:     0x55ee6f8c5c2f - core::panicking::panic_display::h200e18aeed33fb46\n                               at /build/rustc-1.68.2-src/library/core/src/panicking.rs:147:5\n  12:     0x55ee6f8d254a - tokio::runtime::scheduler::Handle::current::he065c6544b8aaa4e\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.28.0/src/runtime/scheduler/mod.rs:57:27\n  13:     0x55ee6f8d9460 - tokio::io::poll_evented::PollEvented\u003cE\u003e::new_with_interest::h70a1c4ea55d55869\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.28.0/src/io/poll_evented.rs:107:58\n  14:     0x55ee6f8d9265 - tokio::io::poll_evented::PollEvented\u003cE\u003e::new::h44691e58f8d2a5a1\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.28.0/src/io/poll_evented.rs:86:9\n  15:     0x55ee6f8d62e9 - tokio::net::tcp::listener::TcpListener::from_std::h05312f7cd89276f6\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.28.0/src/net/tcp/listener.rs:239:18\n  16:     0x55ee6f7bffd2 - hyper::server::tcp::AddrIncoming::from_std::h47337424dfb0b9e2\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.14.26/src/server/tcp.rs:130:24\n  17:     0x55ee6f7bfe6f - hyper::server::tcp::AddrIncoming::new::hde6bab23a70ab6ac\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.14.26/src/server/tcp.rs:122:9\n  18:     0x55ee6f7c01a6 - hyper::server::tcp::AddrIncoming::bind::h4ef92db835ad2635\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.14.26/src/server/tcp.rs:136:9\n  19:     0x55ee6f6fa3f8 - tonic::transport::server::incoming::TcpIncoming::new::h24e54aa16230e512\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/tonic-0.8.3/src/transport/server/incoming.rs:173:25\n  20:     0x55ee6f1fbcaf - tonic::transport::server::Router\u003cL\u003e::serve::{{closure}}::he9b26bac234c25cd\n                               at /home/flokli/.cargo/registry/src/github.com-1ecc6299db9ec823/tonic-0.8.3/src/transport/server/mod.rs:588:24\n  21:     0x55ee6f28e6b7 - tvix_store::main::{{closure}}::h065bde2a4ae63158\n                               at /home/flokli/dev/nixos/code.tvl.fyi-submit2/tvix/store/src/bin/tvix-store.rs:129:41\n  22:     0x55ee6f263dc3 - tokio::runtime::park::CachedParkThread::block_on::{{closure}}::h496727755acfd2c0\n                               at /home/flokli/.cargo/git/checkouts/tokio-9931c4270d67eb3d/873a17a/tokio/src/runtime/park.rs:283:63\n  23:     0x55ee6f263bd5 - tokio::runtime::coop::with_budget::h556eb993a2ef6e20\n                               at /home/flokli/.cargo/git/checkouts/tokio-9931c4270d67eb3d/873a17a/tokio/src/runtime/coop.rs:107:5\n  24:     0x55ee6f263bd5 - tokio::runtime::coop::budget::h1c3f4e8278af8f20\n                               at /home/flokli/.cargo/git/checkouts/tokio-9931c4270d67eb3d/873a17a/tokio/src/runtime/coop.rs:73:5\n  25:     0x55ee6f263bd5 - tokio::runtime::park::CachedParkThread::block_on::ha736949fbd7b6126\n                               at /home/flokli/.cargo/git/checkouts/tokio-9931c4270d67eb3d/873a17a/tokio/src/runtime/park.rs:283:31\n  26:     0x55ee6f255514 - tokio::runtime::context::BlockingRegionGuard::block_on::h02a47bf788e35e5f\n                               at /home/flokli/.cargo/git/checkouts/tokio-9931c4270d67eb3d/873a17a/tokio/src/runtime/context.rs:341:13\n  27:     0x55ee6f15c8aa - tokio::runtime::scheduler::multi_thread::MultiThread::block_on::h5ff7bf2b564d2d54\n                               at /home/flokli/.cargo/git/checkouts/tokio-9931c4270d67eb3d/873a17a/tokio/src/runtime/scheduler/multi_thread/mod.rs:66:9\n  28:     0x55ee6f235380 - tokio::runtime::runtime::Runtime::block_on::hd896b4cfe7130527\n                               at /home/flokli/.cargo/git/checkouts/tokio-9931c4270d67eb3d/873a17a/tokio/src/runtime/runtime.rs:313:45\n  29:     0x55ee6f2340d7 - tvix_store::main::hdb65388aca0f6719\n                               at /home/flokli/dev/nixos/code.tvl.fyi-submit2/tvix/store/src/bin/tvix-store.rs:195:5\n  30:     0x55ee6f2a761b - core::ops::function::FnOnce::call_once::hd72369b489df3893\n                               at /build/rustc-1.68.2-src/library/core/src/ops/function.rs:250:5\n  31:     0x55ee6f2cf85e - std::sys_common::backtrace::__rust_begin_short_backtrace::hfef25a44ae756a70\n                               at /build/rustc-1.68.2-src/library/std/src/sys_common/backtrace.rs:121:18\n  32:     0x55ee6f167981 - std::rt::lang_start::{{closure}}::h6b3e05f4d7caff80\n                               at /build/rustc-1.68.2-src/library/std/src/rt.rs:166:18\n  33:     0x55ee6fc3ca34 - std::rt::lang_start_internal::h1d45298338eec058\n  34:     0x55ee6f16795a - std::rt::lang_start::he27c201342ef913e\n                               at /build/rustc-1.68.2-src/library/std/src/rt.rs:165:17\n  35:     0x55ee6f2341ae - main\n  36:     0x7f16850a0ace - __libc_start_call_main\n  37:     0x7f16850a0b89 - __libc_start_main@@GLIBC_2.34\n  38:     0x55ee6f1376c5 - _start\n  39:                0x0 - \u003cunknown\u003e\n```\n\nHowever, `async fn main` is wrapped via the `tokio::main` macro, so not sure if this is some version incompatibility, or what\u0027s going on here.",
      "revId": "96307a61c94b1957a44381d16cf8181c3948d28d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fcccd92_deb4ad96",
        "filename": "tvix/store/src/bin/tvix-store.rs",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-05-08T15:48:40Z",
      "side": 1,
      "message": "This seems to have been fixed by keeping tokio as-is, and vendoring in the SyncReadStream implementation.",
      "parentUuid": "21f23290_536ae6a1",
      "revId": "96307a61c94b1957a44381d16cf8181c3948d28d",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}