// SPDX-License-Identifier: MIT
// Copyright Â© 2022 The Tvix Authors
syntax = "proto3";

package tvix.store.v1;

import "tvix/castore/protos/castore.proto";
import "tvix/store/protos/pathinfo.proto";

option go_package = "code.tvl.fyi/tvix/store-go;storev1";

service PathInfoService {
  // Return a PathInfo message matching the criteria specified in the
  // GetPathInfoRequest message.
  rpc Get(GetPathInfoRequest) returns (PathInfo);

  // Upload a PathInfo object to the remote end. It MUST not return until the
  // PathInfo object has been written on the the remote end.
  //
  // The remote end MAY check if a potential DirectoryNode has already been
  // uploaded.
  //
  // Uploading clients SHOULD obviously not steer other machines to try to
  // substitute before from the remote end before having finished uploading
  // PathInfo, Directories and Blobs.
  // The returned PathInfo object MAY contain additional narinfo signatures, but
  // is otherwise left untouched.
  rpc Put(PathInfo) returns (PathInfo);

  // Provides calculation of different hashes for store contents.
  // These calculation SHOULD be cached server-side for subsequent requests.
  //
  // All references (to blobs or Directory messages) MUST exist in the store.
  //
  // NAR_* types can be used to retrieve the information necessary to calculate
  // output paths for fixed-output derivations.
  // FLAT_* types can be used to validate expected hashes of file contents.
  rpc CalculateDigest(CalculateDigestRequest) returns (CalculateDigestResponse);

  // Return a stream of PathInfo messages matching the criteria specified in
  // ListPathInfoRequest.
  rpc List(ListPathInfoRequest) returns (stream PathInfo);
}

// The parameters that can be used to lookup a (single) PathInfo object.
// Currently, only a lookup by output hash is supported.
message GetPathInfoRequest {
  oneof by_what {
    // The output hash of a nix path (20 bytes).
    // This is the nixbase32-decoded portion of a Nix output path, so to substitute
    // /nix/store/xm35nga2g20mz5sm5l6n8v3bdm86yj83-cowsay-3.04
    // this field would contain nixbase32dec("xm35nga2g20mz5sm5l6n8v3bdm86yj83").
    bytes by_output_hash = 1;
  }
}

// The parameters that can be used to lookup (multiple) PathInfo objects.
// Currently no filtering is possible, all objects are returned.
message ListPathInfoRequest {}

// Message type to specify the parameters for the CalculateDigest request.
// Only the NAR_* and FLAT_* enum kinds are supported for "type".
message CalculateDigestRequest {
  // The hashing type to use.
  tvix.store.v1.NARInfo.CA.Hash type = 1;

  oneof source {
    // The root node identifying the contents (for NAR_* hashing type enum
    // kinds).
    // The name of the root_node is ignored.
    tvix.castore.v1.Node root_node = 2;

    // The blake3 digest of the raw blob contents (for FLAT_* hashing type enum
    // kinds)
    bytes blob_digest = 3;
  }
}

// CalculateDigestResponse is the response returned by the CalculateDigest
// request.
message CalculateDigestResponse {
  // The calculated digest for the requested hashing type.
  bytes digest = 1;

  // The NAR size, in bytes. Only populated/nonzero if NAR_* hashing types are
  // used.
  uint64 nar_size = 2;
}
