// SPDX-License-Identifier: MIT
// Copyright Â© 2022 The Tvix Authors

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: tvix/castore/protos/rpc_chunkstore.proto

package castorev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChunkService_Stat_FullMethodName = "/tvix.castore.v1.ChunkService/Stat"
	ChunkService_Read_FullMethodName = "/tvix.castore.v1.ChunkService/Read"
	ChunkService_Put_FullMethodName  = "/tvix.castore.v1.ChunkService/Put"
)

// ChunkServiceClient is the client API for ChunkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkServiceClient interface {
	// Stat can be used to check for the existence of a chunk.
	Stat(ctx context.Context, in *StatChunkRequest, opts ...grpc.CallOption) (*StatChunkResponse, error)
	// Read allows reading (all) data of a chunk by the BLAKE3 digest of
	// its contents.
	Read(ctx context.Context, in *ReadChunkRequest, opts ...grpc.CallOption) (ChunkService_ReadClient, error)
	// Put uploads a Chunk, by reading a stream of bytes.
	//
	// The way the data is chunked up in individual ChunkData messages sent in
	// the stream has no effect on how the chunk is stored on the server.
	// The uploaded chunk is constituted from all the individual ChunkData
	// messages that were received.
	Put(ctx context.Context, opts ...grpc.CallOption) (ChunkService_PutClient, error)
}

type chunkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServiceClient(cc grpc.ClientConnInterface) ChunkServiceClient {
	return &chunkServiceClient{cc}
}

func (c *chunkServiceClient) Stat(ctx context.Context, in *StatChunkRequest, opts ...grpc.CallOption) (*StatChunkResponse, error) {
	out := new(StatChunkResponse)
	err := c.cc.Invoke(ctx, ChunkService_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) Read(ctx context.Context, in *ReadChunkRequest, opts ...grpc.CallOption) (ChunkService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChunkService_ServiceDesc.Streams[0], ChunkService_Read_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServiceReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChunkService_ReadClient interface {
	Recv() (*ChunkData, error)
	grpc.ClientStream
}

type chunkServiceReadClient struct {
	grpc.ClientStream
}

func (x *chunkServiceReadClient) Recv() (*ChunkData, error) {
	m := new(ChunkData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chunkServiceClient) Put(ctx context.Context, opts ...grpc.CallOption) (ChunkService_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChunkService_ServiceDesc.Streams[1], ChunkService_Put_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServicePutClient{stream}
	return x, nil
}

type ChunkService_PutClient interface {
	Send(*ChunkData) error
	CloseAndRecv() (*PutChunkResponse, error)
	grpc.ClientStream
}

type chunkServicePutClient struct {
	grpc.ClientStream
}

func (x *chunkServicePutClient) Send(m *ChunkData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chunkServicePutClient) CloseAndRecv() (*PutChunkResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChunkServiceServer is the server API for ChunkService service.
// All implementations must embed UnimplementedChunkServiceServer
// for forward compatibility
type ChunkServiceServer interface {
	// Stat can be used to check for the existence of a chunk.
	Stat(context.Context, *StatChunkRequest) (*StatChunkResponse, error)
	// Read allows reading (all) data of a chunk by the BLAKE3 digest of
	// its contents.
	Read(*ReadChunkRequest, ChunkService_ReadServer) error
	// Put uploads a Chunk, by reading a stream of bytes.
	//
	// The way the data is chunked up in individual ChunkData messages sent in
	// the stream has no effect on how the chunk is stored on the server.
	// The uploaded chunk is constituted from all the individual ChunkData
	// messages that were received.
	Put(ChunkService_PutServer) error
	mustEmbedUnimplementedChunkServiceServer()
}

// UnimplementedChunkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChunkServiceServer struct {
}

func (UnimplementedChunkServiceServer) Stat(context.Context, *StatChunkRequest) (*StatChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedChunkServiceServer) Read(*ReadChunkRequest, ChunkService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedChunkServiceServer) Put(ChunkService_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedChunkServiceServer) mustEmbedUnimplementedChunkServiceServer() {}

// UnsafeChunkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServiceServer will
// result in compilation errors.
type UnsafeChunkServiceServer interface {
	mustEmbedUnimplementedChunkServiceServer()
}

func RegisterChunkServiceServer(s grpc.ServiceRegistrar, srv ChunkServiceServer) {
	s.RegisterService(&ChunkService_ServiceDesc, srv)
}

func _ChunkService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).Stat(ctx, req.(*StatChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadChunkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkServiceServer).Read(m, &chunkServiceReadServer{stream})
}

type ChunkService_ReadServer interface {
	Send(*ChunkData) error
	grpc.ServerStream
}

type chunkServiceReadServer struct {
	grpc.ServerStream
}

func (x *chunkServiceReadServer) Send(m *ChunkData) error {
	return x.ServerStream.SendMsg(m)
}

func _ChunkService_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServiceServer).Put(&chunkServicePutServer{stream})
}

type ChunkService_PutServer interface {
	SendAndClose(*PutChunkResponse) error
	Recv() (*ChunkData, error)
	grpc.ServerStream
}

type chunkServicePutServer struct {
	grpc.ServerStream
}

func (x *chunkServicePutServer) SendAndClose(m *PutChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chunkServicePutServer) Recv() (*ChunkData, error) {
	m := new(ChunkData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChunkService_ServiceDesc is the grpc.ServiceDesc for ChunkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tvix.castore.v1.ChunkService",
	HandlerType: (*ChunkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _ChunkService_Stat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _ChunkService_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _ChunkService_Put_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tvix/castore/protos/rpc_chunkstore.proto",
}
