[package]
name = "tvix-eval"
version = "0.1.0"
edition = "2021"

[lib]
name = "tvix_eval"

[dependencies]
builtin-macros = { path = "./builtin-macros", package = "tvix-eval-builtin-macros" }
<<<<<<< HEAD   (649ccd chore(clippy): fix clippy (lvl2: MachineApplicable, human-ai)
bytes = "1.4.0"
bstr = { version = "1.8.0", features = ["serde"] }
codemap = "0.1.3"
codemap-diagnostic = "0.1.1"
dirs = "4.0.0"
genawaiter = { version = "0.99.1", default-features = false }
itertools = "0.12.0"
lazy_static = "1.4.0"
lexical-core = { version = "0.8.5", features = ["format", "parse-floats"] }
os_str_bytes = { version = "6.3", features = ["conversions"] }
path-clean = "1.0"
proptest = { version = "1.3.0", default-features = false, features = ["std", "alloc", "tempfile"], optional = true }
regex = "1.6.0"
rnix = "0.11.0"
rowan = "*" # pinned by rnix
serde = { version = "1.0", features = [ "rc", "derive" ] }
serde_json = "1.0"
smol_str = "0.2.0"
tabwriter = "1.2"
test-strategy = { version = "0.2.1", optional = true } # TODO: update
=======
bytes = { workspace = true }
bstr = { workspace = true, features = ["serde"] }
codemap = { workspace = true }
codemap-diagnostic = { workspace = true }
dirs = { workspace = true }
genawaiter = { workspace = true }
itertools = { workspace = true }
lazy_static = { workspace = true }
lexical-core = { workspace = true, features = ["format", "parse-floats"] }
os_str_bytes = { workspace = true, features = ["conversions"] }
path-clean = { workspace = true }
proptest = { workspace = true, features = ["std", "alloc", "tempfile"], optional = true }
regex = { workspace = true }
rnix = { workspace = true }
rowan = { workspace = true } # pinned by rnix
serde = { workspace = true, features = ["rc", "derive"] }
serde_json = { workspace = true }
smol_str = { workspace = true }
tabwriter = { workspace = true }
test-strategy = { workspace = true, optional = true }
>>>>>>> BRANCH (e4378f feat(tvix/store): seekable nar renderer)
toml = "0.6.0"
sha2 = { workspace = true }
sha1 = { workspace = true }
md-5 = { workspace = true }
data-encoding = { workspace = true }
rustc-hash = { workspace = true }
nohash-hasher = { workspace = true }
vu128 = { workspace = true }
thiserror.workspace = true

[dev-dependencies]
criterion = { workspace = true }
itertools = { workspace = true }
mimalloc = { workspace = true }
pretty_assertions = { workspace = true }
rstest = { workspace = true }
tempfile = { workspace = true }

[features]
default = ["impure", "arbitrary", "nix_tests"]

# Enables running the Nix language test suite from the original C++
# Nix implementation (at version 2.3) against Tvix.
nix_tests = []

# Enables operations in the VM which depend on the ability to perform I/O
impure = []

# Enables Arbitrary impls for internal types (required to run tests)
arbitrary = ["proptest", "test-strategy"]

# Don't leak strings (enable this if you care about peak memory usage of eval)
#
# This is intended as a stop-gap until we have a garbage collector
no_leak = []

[[bench]]
name = "eval"
harness = false

[lints]
workspace = true
