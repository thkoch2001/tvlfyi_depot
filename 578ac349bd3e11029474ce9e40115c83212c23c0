{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "86507980_0c2f74ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-11-01T20:39:04Z",
      "side": 1,
      "message": "Thanks for working on this. We want something like this at my company atm as well ðŸ˜Ž",
      "revId": "578ac349bd3e11029474ce9e40115c83212c23c0",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2180f33_731eda73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-11-01T21:07:24Z",
      "side": 1,
      "message": "Another drive-by comment for anyone not familiar with why this might be useful:\n\nImagine you have a deployment step that looks ~like this:\n\n```\n# Terraform\nterraform plan -out\u003dtfplan\nterraform apply -input\u003dfalse tfplan\nterraform output -raw kubeconfig \u003e config.yaml\n\n# Kubernetes\nkubectl set image deployment/foo bar\u003dbaz/potato:r1234 --kubeconfig\u003dconfig.yaml\nkubectl rollout restart deployment/foo --kubeconfig\u003dconfig.yaml\n```\n\nIn this case it would be nice to have two steps like so:\n\n```\nmeta.ci.extraSteps \u003d {\n  terraform \u003d {\n    phase \u003d \"deploy\";\n    label \u003d \":terraform: Read remote state\";\n    command \u003d \u0027\u0027\n      terraform plan -out\u003dtfplan\n      terraform apply -input\u003dfalse tfplan\n      terraform output -raw kubeconfig \u003e kubecfg.yaml\n      buildkite-agent artifact upload kubecfg.yaml\n    \u0027\u0027;\n  };\n  kubernetes \u003d {\n    phase \u003d \"deploy\";\n    label \u003d \":k8s: Deploy cluster\";\n    command \u003d \u0027\u0027\n      buildkite-agent artifact download kubecfg.yaml .\n      kubectl set image deployment/foo bar\u003dbaz/potato:r1234 --kubeconfig\u003dkubecfg.yaml\n      kubectl rollout restart deployment/foo --kubeconfig\u003dkubecfg.yaml\n    \u0027\u0027;\n  };\n};\n```\n\nThat way if either one of the steps failed, we could use the Buildkite UI to retry that step.",
      "revId": "578ac349bd3e11029474ce9e40115c83212c23c0",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbf2fdfc_a3a901a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-11-04T01:45:21Z",
      "side": 1,
      "message": "Drive-by comment (pt II) - might we want some validation to ensure that a steps that depend on one another share the same `phase`?",
      "revId": "578ac349bd3e11029474ce9e40115c83212c23c0",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7d01ea0_e77c208f",
        "filename": "nix/buildkite/default.nix",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-11-01T20:39:04Z",
      "side": 1,
      "message": "nit: does this change need to be rebased? these changes feel outside the scope of this CL",
      "range": {
        "startLine": 286,
        "startChar": 2,
        "endLine": 290,
        "endChar": 17
      },
      "revId": "578ac349bd3e11029474ce9e40115c83212c23c0",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "439f91b0_cdf240fa",
        "filename": "nix/buildkite/default.nix",
        "patchSetId": 3
      },
      "lineNbr": 292,
      "author": {
        "id": 1000038
      },
      "writtenOn": "2022-10-13T11:04:16Z",
      "side": 1,
      "message": "A small nit, but maybe we should use original Buildkite terminology for buildkite parameters?\n\nhaving `key` instead of `identifier` would simplify finding Buildkite documentation without necessity of reading tvl-kite source code.\n\nOtherwise look great, this should allow modelling complicated extra step graphs when needed.",
      "range": {
        "startLine": 292,
        "startChar": 6,
        "endLine": 292,
        "endChar": 16
      },
      "revId": "578ac349bd3e11029474ce9e40115c83212c23c0",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7efaf12a_c079a428",
        "filename": "nix/buildkite/default.nix",
        "patchSetId": 3
      },
      "lineNbr": 292,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-11-01T20:39:04Z",
      "side": 1,
      "message": "drive-by comment: +1 wrt aligning Buildkite terminology",
      "parentUuid": "439f91b0_cdf240fa",
      "range": {
        "startLine": 292,
        "startChar": 6,
        "endLine": 292,
        "endChar": 16
      },
      "revId": "578ac349bd3e11029474ce9e40115c83212c23c0",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cc06bdb_98ba265d",
        "filename": "nix/buildkite/default.nix",
        "patchSetId": 3
      },
      "lineNbr": 428,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-11-01T20:39:04Z",
      "side": 1,
      "message": "How do we feel about a final step that `builtins.throw`s when `cfg.key` doesn\u0027t exist in the pipeline?\n\nSomething like: https://gist.github.com/wpcarro/a9d98f52915e71477e7299223410aab6",
      "revId": "578ac349bd3e11029474ce9e40115c83212c23c0",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}