#ifndef SU_EMITJSON_H
#define SU_EMITJSON_H

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

#include <su/s.h>

#ifndef EJ_INT_BUF_SIZE
#define EJ_INT_BUF_SIZE 512
#endif

typedef struct ej_context {
  FILE *out;
  bool need_comma;
  size_t written;
} ej_context_t;

void ej_init(ej_context_t *, FILE *);

void ej_object(ej_context_t *);
void ej_object_end(ej_context_t *);

#define ej_bind_const(ctx, b) \
  ej_bind_len(ctx, (const char *) b, sizeof(b) - 1)

void ej_bind(ej_context_t *, slice_t);
void ej_bind_len(ej_context_t *, const char *, size_t);

void ej_array(ej_context_t *);
void ej_array_end(ej_context_t *);

void ej_string_len(ej_context_t *, const char *, size_t);
void ej_string(ej_context_t *, slice_t);

void ej_null(ej_context_t *);

void ej_bool(ej_context_t *, bool);

void ej_int(ej_context_t *, int);
void ej_uint(ej_context_t *, unsigned int);

void ej_long(ej_context_t *, long int);
void ej_ulong(ej_context_t *, unsigned long int);
void ej_long_long(ej_context_t *, long long int);
void ej_ulong_long(ej_context_t *, unsigned long long int);

void ej_uint8(ej_context_t *, uint8_t);
void ej_uint16(ej_context_t *, uint16_t);
void ej_uint32(ej_context_t *, uint32_t);

/// Note that the int range for uint64_t is greater
/// of the JSON number, so JavaScript-compatible
/// parsers will truncate numbers generated by this
/// function.
void ej_uint64(ej_context_t *, uint64_t);

void ej_int8(ej_context_t *, int8_t);
void ej_int16(ej_context_t *, int16_t);
void ej_int32(ej_context_t *, int32_t);

/// Note that the int range for int64_t is greater
/// of the JSON number, so JavaScript-compatible
/// parsers will truncate numbers generated by this
/// function.
void ej_int64(ej_context_t *, int64_t);

#endif
