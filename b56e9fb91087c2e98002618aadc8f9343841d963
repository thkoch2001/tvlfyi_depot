{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "52ba44cd_1edbf8c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-09-18T11:51:20Z",
      "side": 1,
      "message": "Is there any other observable issue other than different .drv hashes?\n\nWe documented that in cl/9080, output paths are the same, and I\u0027m still not sure if we actually need to put in more work to properly track this.\n\nAlso note that things like https://github.com/NixOS/nix/issues/4347 exist, where Nix decided to \"shortcut\" to \"simpler FODs\" (though in other cases) - so I\u0027d argue using a \"simpler build recipe\" is actually more desirable.",
      "revId": "b56e9fb91087c2e98002618aadc8f9343841d963",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "594648b4_d39b2b7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-09-18T23:20:16Z",
      "side": 1,
      "message": "Yes, it affects `.outPath` hashes of packages downstream of the affected FOD.\n\nBasically, try this CL, and if it panics you know that the code *before* this CL would have returned an incorrect value instead.  Of course the best solution would be to fix the bug, but in the meantime I think that panicing at the point of error is better than silently returning incorrect results.\n\nTo fix the underlying bug we will need to change the data structures: `path` can\u0027t be just a `HashMap\u003cPathName, PathKind\u003e`; the values of the `HashMap` will somehow need to be a collection of `PathKind`s.\n\n\u003e Also note that things like https://github.com/NixOS/nix/issues/4347 exist,\n\nYou mentioned that PR on IRC, but I think you misunderstand what it does.  Read the code that goes with it -- notice how all of the important changes are wrapped in \"if `ca-derivations` then\" blocks.  The PR comment doesn\u0027t explain this, so it\u0027s easy to misread what it does unless you look at the code.\n\nAnyways, that PR has absolutely no effect unless you\u0027re using `ca-derivations`, which tvix doesn\u0027t support yet.",
      "parentUuid": "52ba44cd_1edbf8c0",
      "revId": "b56e9fb91087c2e98002618aadc8f9343841d963",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "beee85d2_b6245114",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-09-19T08:44:28Z",
      "side": 1,
      "message": "\u003e Yes, it affects .outPath hashes of packages downstream of the affected FOD.\n\nHow? For output path calculation, FODs are replaced with some hashDevivationModulo string (https://cs.tvl.fyi/depot@6c586bc2a7a49755b4b2566c034bc1affc92011d/-/blob/tvix/nix-compat/src/derivation/mod.rs?L151), so this should only differ if the name differs (and we do already consider this different with the current design?)\n\n\u003e You mentioned that PR on IRC, but I think you misunderstand what it does. Read the code that goes with it -- notice how all of the important changes are wrapped in \"if ca-derivations then\" blocks. The PR comment doesn\u0027t explain this, so it\u0027s easy to misread what it does unless you look at the code.\n\nI read the code, and I understand it\u0027s only used in the ca-derivations case. My point was mostly that even Nix started to short-circuit in some FODs, because the output path doesn\u0027t change.\n\nMaybe it\u0027s better to talk about this in sync, to make sure we both talk about the same thing?",
      "parentUuid": "594648b4_d39b2b7b",
      "revId": "b56e9fb91087c2e98002618aadc8f9343841d963",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82999064_f6468eb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-09-19T08:46:44Z",
      "side": 1,
      "message": "A different version is an instance of a different \"name\", as would be a different pname. They both end up in the \"name\".",
      "parentUuid": "beee85d2_b6245114",
      "revId": "b56e9fb91087c2e98002618aadc8f9343841d963",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed14a2c3_41e258af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-10-06T09:37:49Z",
      "side": 1,
      "message": "It seems perldevel got removed in 9f815be60520665e139fb8575a64218fc7994ecc, so I checked out 9f815be60520665e139fb8575a64218fc7994ecc~1, and it\u0027s not a FOD, but a flat file:\n\n❯ nix-build -A perldevel.src\n/nix/store/68iaivqj1m34j679hwnxx0hvimqd2m96-perl-5.38.0.tar.gz\n❯ nix-build -A perl538.src\n/nix/store/68iaivqj1m34j679hwnxx0hvimqd2m96-perl-5.38.0.tar.gz\n\nThis also seems to be the case on the release-23.05 branch, so I don\u0027t know how to reproduce this.",
      "parentUuid": "82999064_f6468eb0",
      "revId": "b56e9fb91087c2e98002618aadc8f9343841d963",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce7f9417_6ce50318",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-10-06T09:40:48Z",
      "side": 1,
      "message": "I wasn\u0027t really able to figure out how to reproduce it, so I created another example, allowing to play with FODs of different names and/or different build recipes:\n\n\n\n```\nlet\n  pkgs \u003d …;\n  mkFod \u003d name: extraBuild: pkgs.stdenv.mkDerivation {\n    inherit name;\n    # src \u003d ./default.nix;\n    dontUnpack \u003d true;\n\n    buildPhase \u003d \u0027\u0027\n      mkdir -p $out\n      touch $out/.keep\n    \u0027\u0027 + extraBuild;\n\n    outputHashMode \u003d \"recursive\";\n    outputHashAlgo \u003d \"sha256\";\n    outputHash \u003d \"sha256-Q3QXOoy+iN4VK2CflvRulYvPZXYgF0dO7FoF7CvWFTA\u003d\";\n  };\nin {\n  fod-foo \u003d (mkFod \"foo\" \"\");\n  fod-foo2 \u003d (mkFod \"foo\" \"sleep 1\");\n  fod-bar \u003d (mkFod \"bar\" \"\");\n}\n```\n❯ nix-instantiate nix -A fod-foo\n/nix/store/8gx9j990sk4vy2a403g7cdj9qj1i04hb-foo.drv\n❯ nix-build -A fod-foo\n/nix/store/17wgs52s7kcamcyin4ja58njkf91ipq8-foo\n\n❯ nix-instantiate nix -A fod-foo2\n/nix/store/w55xzn5p67674nxhb2i0a6shrj07iasc-foo.drv\n❯ nix-build -A fod-foo2\n/nix/store/17wgs52s7kcamcyin4ja58njkf91ipq8-foo\n\n❯ nix-instantiate nix -A fod-bar\n/nix/store/jivx5zg9zkqk8gmpvxbg76qphmgjp9db-bar.drv\n❯ nix-build -A fod-bar\n/nix/store/xdr584252fnmr951y58030mdl94j3pqf-bar\n\nSo yes, both the output hash *and* the name (and only these two) is what affects the output path of a FOD. See https://docs.tvix.dev/rust/src/nix_compat/store_path/utils.rs.html#125-134, where exactly these two are function parameters.\n\nI need to read known_paths and surroundings again to see if/how we need to handle this.",
      "parentUuid": "ed14a2c3_41e258af",
      "revId": "b56e9fb91087c2e98002618aadc8f9343841d963",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55931f2a_49f63462",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-11-25T02:36:37Z",
      "side": 1,
      "message": "\u003e I need to read known_paths and surroundings again to see if/how we need to handle this.\n\nOkay; since it\u0027s currently unhandled can we merge this in the meantime?\n\nA panic is better than somebody else having to rediscover all of this the hard way.",
      "parentUuid": "ce7f9417_6ce50318",
      "revId": "b56e9fb91087c2e98002618aadc8f9343841d963",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}