{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3c0dc19f_e9f48186",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-03-07T21:01:04Z",
      "side": 1,
      "message": "Small nitpicks, biggest question for me the is choice of the bounded size for the mpsc channel which can be a source of pain later on.\nAlso, error propagation wrt to receiver drops is not clear to me.\nOtherwise, LGTM.",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0ed683a_77c81862",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 52,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-03-07T21:01:04Z",
      "side": 1,
      "message": "why 5? (a comment on the rationale?)",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e648b117_02791b5a",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 52,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-03-08T15:47:29Z",
      "side": 1,
      "message": "That number came from the directory service - the idea there was to have some elasticity here in the stream to be able to send out small closures \"in batches\" without waiting too much for roundtrips, and 5 is a bit arbitrarily picked there (should be benchmarked).\n\nIn the case of GRPCBlobService::read… I\u0027m not sure about that number. It also here feels a good idea to have some elasticity, but I\u0027m even less sure about the numbers. What\u0027s your thoughts?",
      "parentUuid": "d0ed683a_77c81862",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c2672c2_5432ac9f",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 52,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-03-08T19:24:49Z",
      "side": 1,
      "message": "Hm, so I think it would be good to extract these constants in some \"global location\" or to make them apparent to developers for now\nThen, I think through OTEL, we should try to trace the behavior related to the size of the queues, etc.\nUnfortunately, I have no advice regarding the actual choice of the number ; that would require a proper consideration of the whole system (so I prefer to see what happens after we finish up the chain).\nNevertheless, I am concerned about the situations where the queue size is so small that deadlocks could theorically happen because of \"network dependencies\" for example.",
      "parentUuid": "e648b117_02791b5a",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "393ab9bf_88390801",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 54,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-03-07T21:01:04Z",
      "side": 1,
      "message": "detailed",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1fde7c8_5525762b",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 54,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-03-08T15:47:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "393ab9bf_88390801",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d163a9bc_77b8d4a5",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 67,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-03-07T21:01:04Z",
      "side": 1,
      "message": "nit: could not this logic be turned into something like match self.chunk_service.get(\u0026req.digest)? { None \u003d\u003e ..., Some(data) \u003d\u003e ... } and let the error propagate itself?\n\nI would even probably factor out the \"None\" arm through macro or whatever (or if let ... else pattern) and focus only on the Some(data) logic which is the only non-trivial here",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45d43e50_766d697f",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 67,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-03-08T15:47:29Z",
      "side": 1,
      "message": "good point on the error propagation. I did it here and in the blob_service.stat(…) call a bit further up.\n\nThe None part wasn\u0027t too big, I kept it in the else branch. PTAL.",
      "parentUuid": "d163a9bc_77b8d4a5",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17049fa8_861b2849",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 67,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-03-08T19:24:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "45d43e50_766d697f",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05cb07ad_d42f74c5",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-03-07T21:01:04Z",
      "side": 1,
      "message": "is it enough to deal with the error?",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29d46e62_3aefe535",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2023-03-08T15:47:29Z",
      "side": 1,
      "message": "This is when the client exits early, while asking to get streamed the contents of a chunk/blob (and in that case, the case where we don\u0027t have the blob/chunk).\n\nWe can\u0027t send anything to the receiver anymore, because they already left, and we don\u0027t need to do any cleanups on our side, other than dropping stuff that\u0027s currently in scope (which we do). What else should we do?",
      "parentUuid": "05cb07ad_d42f74c5",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c608d8d0_7d601b69",
        "filename": "tvix/store/src/proto/grpc_blobservice_wrapper.rs",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 1000073
      },
      "writtenOn": "2023-03-08T19:24:49Z",
      "side": 1,
      "message": "Got it, sounds good. I would only advise to have counters of these behaviors.",
      "parentUuid": "29d46e62_3aefe535",
      "revId": "b08f009c0fda1d3e9ec98a66e1a53404f7fc96a2",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}