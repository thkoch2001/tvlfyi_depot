{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "539e5d34_52ef1925",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-10-30T21:59:59Z",
      "side": 1,
      "message": "I also considered passing along the original nixhash Error into the InvalidHash, but this requires a dependency from eval to nixhash (with a change to Cargo.toml). Since other eval Errors also seemed to use strings, I opted for this as well.",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9d88090_f0328019",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-10-30T22:07:36Z",
      "side": 1,
      "message": "it\u0027s correct as-is. we probably are gonna end up with some nicer boxing of original errors, but that\u0027s part of a larger effort.",
      "parentUuid": "539e5d34_52ef1925",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d21f94ee_54fb0393",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-11-02T19:56:53Z",
      "side": 1,
      "message": "\u003e passing along the original nixhash Error into the InvalidHash\n\nYou could still do this using a trait object if you think it adds valuable information (that would be something that can be automatically acted on), but this is probably fine. Not adding a dependency is the right call in general.",
      "parentUuid": "d9d88090_f0328019",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9377542_0b9a4690",
        "filename": "tvix/glue/src/builtins/fetchers.rs",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-10-30T22:07:36Z",
      "side": 1,
      "message": "does it make sense to use this new error when constructing derivations too?",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e76761ac_1c24b272",
        "filename": "tvix/glue/src/builtins/fetchers.rs",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-11-01T22:20:55Z",
      "side": 1,
      "message": "Very good point. It seemed that derivation.rs already has `DerivationError::InvalidOutputHash`, so the eval errors do not seem to apply there.\n\nHowever, builtins.path did use the same mechanism as builtins.fetchurl, so I applied the change there.\n\nThanks for the suggestion :+1:",
      "parentUuid": "a9377542_0b9a4690",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60415738_7f587672",
        "filename": "tvix/glue/src/builtins/fetchers.rs",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-02T00:00:23Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "e76761ac_1c24b272",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "975cf435_dc1e3ab0",
        "filename": "views/tvix/workspace.josh",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-10-30T22:07:36Z",
      "side": 1,
      "message": "did you checkout only the josh view and re-push that, and josh screwed this up? or is this an unintended edit?",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b9b98f0_bb98177a",
        "filename": "views/tvix/workspace.josh",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2024-11-01T22:20:55Z",
      "side": 1,
      "message": "\u003e did you checkout only the josh view and re-push that, and josh screwed this up? or is this an unintended edit?\n\nI\u0027m not used to Gerrit, but this change (workspace.josh) was not part of my original commit. I guess it was added when I changed the message inside of Gerrit afterwards.\n\n---\n\nAh I see now josh has something to do with the workspace. I\u0027m using https://code.tvl.fyi/depot.git:workspace\u003dviews/tvix.git as the remote. I guess I should be using the full monorepo to make contributions? I\u0027ll give that a go tomorrow. Or is the workspace.josh a blocker?",
      "parentUuid": "975cf435_dc1e3ab0",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3a2ffa3_0c03d04c",
        "filename": "views/tvix/workspace.josh",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-02T00:00:23Z",
      "side": 1,
      "message": "you seem to be running into the same bug as https://b.tvl.fyi/issues/320. unfortunately there\u0027s been no update on the upstream bug either. \n\nI think you unfortunately need to get the full checkout and cherry-pick/ re-apply this commit to prevent this workspace.josh file from appearing as being changed. This otherwise might change behavior for the inverse direction :-/",
      "parentUuid": "4b9b98f0_bb98177a",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c521dd9_be2744ca",
        "filename": "views/tvix/workspace.josh",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-02T15:02:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3a2ffa3_0c03d04c",
      "revId": "549a958382eba7b6abd9e4da3de51897ba78451b",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}