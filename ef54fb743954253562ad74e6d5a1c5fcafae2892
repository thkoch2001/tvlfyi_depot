{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f097364d_c83bad40",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-17T07:27:28Z",
      "side": 1,
      "message": "This needs a file-level docstring explaining the API and how do use it, maybe even a doctest of an example usage. I\u0027m happy to help draft this together, but I feel like only per-function docstrings are gonna make the overall idea too hard to grasp.",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff274a71_e63d96b9",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:40:55Z",
      "side": 1,
      "message": "added module-level docstring with examples",
      "parentUuid": "f097364d_c83bad40",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb90c481_e273f78d",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T14:33:15Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ff274a71_e63d96b9",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faf12a22_2b06643d",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-17T07:27:28Z",
      "side": 1,
      "message": "can we still call register from the outside to add our own implementation to the registry?",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8e58ed8_2725d391",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-06-18T16:45:52Z",
      "side": 1,
      "message": "yes, sure. the API is public and so are the global registries BLOB_REG and DIRECTORY_REG. The limitations are the usual Rust ABI stability quirks, so dynamically loaded modules would need some special consideration.",
      "parentUuid": "faf12a22_2b06643d",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aace62f8_3123df81",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-20T18:41:46Z",
      "side": 1,
      "message": "I played around with this a bit, it seems I\u0027m not able to invoke `reg.register()` from \"regular code\" at runtime.\n\nI was however able to instantiate my own different registry using my own `lazy_static` block of course. Which I think should be fine, if we build another binary knowing about other stores, it should be fine to require knowing about these at lazy_static time.\n\nIf this is intentional / as expected, maybe we don\u0027t need a to control mutability, but just an `Arc`? And maybe move the \"register the common services\" into a function each taking a specific `\u0026mut Registry\u003cdyn â€¦\u003e`, like this:\n\n```rust\nlazy_static! {\n    pub static ref BLOB_REG: Mutex\u003cRegistry\u003cdyn BlobService\u003e\u003e \u003d {\n        let mut reg \u003d Registry(Default::default());\n        add_default_blobservices(\u0026mut reg);\n        Mutex::new(reg)\n    };\n    pub static ref DIRECTORY_REG: Mutex\u003cRegistry\u003cdyn DirectoryService\u003e\u003e \u003d {\n        let mut reg \u003d Registry(Default::default());\n        add_default_directoryservices(\u0026mut reg);\n        Mutex::new(reg)\n    };\n}\n\nimpl\u003c\u0027de\u003e serde::Deserialize\u003c\u0027de\u003e for Box\u003cdyn BlobService\u003e {\n    fn deserialize\u003cD\u003e(de: D) -\u003e std::result::Result\u003cSelf, D::Error\u003e\n    where\n        D: serde::Deserializer\u003c\u0027de\u003e,\n    {\n        serde_tagged::de::internal::deserialize(de, \"type\", \u0026BLOB_REG.lock().unwrap().0)\n    }\n}\n\nimpl\u003c\u0027de\u003e serde::Deserialize\u003c\u0027de\u003e for Box\u003cdyn DirectoryService\u003e {\n    fn deserialize\u003cD\u003e(de: D) -\u003e std::result::Result\u003cSelf, D::Error\u003e\n    where\n        D: serde::Deserializer\u003c\u0027de\u003e,\n    {\n        serde_tagged::de::internal::deserialize(de, \"type\", \u0026DIRECTORY_REG.lock().unwrap().0)\n    }\n}\n```\n\nThat would make registry instantiation that also picks the \"default ones\" easier.",
      "parentUuid": "c8e58ed8_2725d391",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff305613_267a7ce7",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-21T15:02:25Z",
      "side": 1,
      "message": "I realized there\u0027s still Mutex in the code sample, ignore these :-)",
      "parentUuid": "aace62f8_3123df81",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0427a94a_cf36a3f2",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000106
      },
      "writtenOn": "2024-07-12T11:40:55Z",
      "side": 1,
      "message": "This comment should be obsolete?",
      "parentUuid": "ff305613_267a7ce7",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f19f48e_ddec3175",
        "filename": "tvix/castore/src/composition.rs",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-07-12T14:33:15Z",
      "side": 1,
      "message": "Ok",
      "parentUuid": "0427a94a_cf36a3f2",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b18071e_695f434f",
        "filename": "tvix/castore/src/directoryservice/object_store.rs",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-06-17T07:27:28Z",
      "side": 1,
      "message": "Unsure about the naming here, it gets quite long.\n\nMaybe we just call this ServiceConfig, and only add the long name in the public export?\n\nMore like a note, we have a bit of the same mess with the services themselves.",
      "revId": "ef54fb743954253562ad74e6d5a1c5fcafae2892",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}