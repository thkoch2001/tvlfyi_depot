{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "09edb178_11c206cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000058
      },
      "writtenOn": "2024-11-09T20:14:09Z",
      "side": 1,
      "message": "Not sure how Buildkite will handle this",
      "revId": "04c8ce074eff47f4062c24998e42d25b666a5126",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2983c9a_693aa6b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-09T20:17:21Z",
      "side": 1,
      "message": "We wont\u0027 be able to test this this way, as the `tvix` pipeline is only run /after/ this CL would be pushed to `canon`. If we want to go this path, it would need to be added to the global pipeline.\n\nI\u0027m wondering though, why don\u0027t we use the Nix build we already have and wrap it into a container image?",
      "parentUuid": "09edb178_11c206cd",
      "revId": "04c8ce074eff47f4062c24998e42d25b666a5126",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cced63f4_59af561c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000161
      },
      "writtenOn": "2024-11-09T22:07:24Z",
      "side": 1,
      "message": "Additionally, nixpkgs.dockerTools should just work(c) right?\n\nhttps://nix.dev/tutorials/nixos/building-and-running-docker-images.html",
      "parentUuid": "c2983c9a_693aa6b2",
      "revId": "04c8ce074eff47f4062c24998e42d25b666a5126",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2dbdac0_b8e61cbd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000058
      },
      "writtenOn": "2024-11-12T08:33:46Z",
      "side": 1,
      "message": "Are there any plans to make the Nix builds work in https://github.com/tvlfyi/tvix? That\u0027s why I went with the Dockerfile: any repo users can now easily build the project, even if they are not familiar with Nix yet.\n\nAs a follow-up, I could add a .github/workflows/docker-push.yml that gets triggered on pushes to master, builds, and publishes the images to Github. It won\u0027t be tested on Gerrit, though.",
      "parentUuid": "cced63f4_59af561c",
      "revId": "04c8ce074eff47f4062c24998e42d25b666a5126",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8003d8d_fc5236b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000036
      },
      "writtenOn": "2024-11-12T09:00:53Z",
      "side": 1,
      "message": "\u003e Are there any plans to make the Nix builds work in https://github.com/tvlfyi/tvix?\n\nYes, I\u0027d like this to work, but making the Nix code work requires some custom fixpoint magic when setting up the readTree hierarchy, and ensuring everything used from depot is actually exported in the josh export too.\n\n\u003e any repo users can now easily build the project, even if they are not familiar with Nix yet.\n\nI\u0027m not sure supporting \"building without Nix installed\" is a goal right now - there\u0027s too many moving variables on how this could break.\nI\u0027d rather spend some time getting the Nix expressions to work in the export, then there\u0027ll be one canonical build.\n\nWe can start having the dockerTools call just inside the tvix/nar-bridge/default.nix, and once the Nix expressions are exported too, ensure this works as well.",
      "parentUuid": "f2dbdac0_b8e61cbd",
      "revId": "04c8ce074eff47f4062c24998e42d25b666a5126",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}