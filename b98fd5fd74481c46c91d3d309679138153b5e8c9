{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aabd907a_2827f031",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "I like this a lot.\n\nI have not read cl/8104 yet, but if the implementation lives up to the advertisement this is definitely the way to go.\n\nI have time tomorrow and intend to start reading cl/8104, but first I have to catch up on ~2 months worth of commits to tvix, so we\u0027ll see if I actually get to the CL.  I may upgrade this to a +2 after I\u0027ve seen the gory details.",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fc2661a_aebffef8",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 50,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "It is not a goal to introduce async I/O in tvix-eval.  I think we both agree about this.\n\nIs it a goal to introduce *concurrency*?  I\u0027m not sure.  But that is the big question here.\n\nNote that in order to have async I/O, you must have concurrency.  But the opposite is not true.  A toy example of concurrency without I/O would be interleaving the execution of subexpressions (for example `[ (f x) (g x) ]` interleaving the bytecodes for `f` and `g`) with context switches possible only where the frame type changes (i.e. when bytecode invokes a builtin or a builtin invokes bytecode).  This is a silly toy example just to make clear what concurrency-without-I/O means; it is not a motivation.\n\nI bring this up because the async I/O state machine is quite complex and tricky specifically because it needs to support concurrency.  Also, Rust\u0027s optimizer -- as awesome as it is -- will not be able to figure out that our `async`-keyword-using programs are not concurrent.  So we will lose a large amount of optimization opportunities as a result of this -- indirect calls where the jump target is always the same, etc.  See next comment about this.\n\nThe previous paragraph is really just my verbose way of venting about the fact that Rust doesn\u0027t have an explicit tailcall mechanism.  If it did, none of this would be necessary.  But it doesn\u0027t, and it won\u0027t get one anytime soon.  And the trampolines were an unreadable mess; I\u0027m happy to see them go.\n\nAnyways, now that my rant is over; to resolve this comment, would you please indicate if concurrency is a conscious goal here?  I suggest doing so by editing to one of the following, whichever is appropriate:\n\n1. \"*without* introducing asynchronous I/O or concurency\" or \n2. \"and making tvix-eval concurrent, but notably *without*...\"",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9d7e7ca_f47ebaae",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 50,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "Concurrency is not *currently* a goal, and I\u0027m not actually sure that it will be. We do aspire to be able to suspend and *go do something else* (while waiting on the store), but I think that\u0027s doable without actually doing anything concurrently, and probably even with the machinery already built for this.\n\nI\u0027ll update it to the first proposed alternative.",
      "parentUuid": "2fc2661a_aebffef8",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8689d0a_ed943796",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "I think you mean `async fn some_builtin(...`.\n\nIt\u0027s a bit confusing that the previous paragraph says \"a Rust function that uses the `async` keyword, such as \u003cfunction that doesn\u0027t use the async keyword\u003e\" ðŸ˜Š",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f92719c1_bc3a459b",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "whoops, fixed :)",
      "parentUuid": "d8689d0a_ed943796",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bc4379b_6ca3bccf",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 84,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "Hooray.  Let\u0027s document this convention in the code as well.  Trying to reverse engineer the stack discipline was the most unpleasant part of the half-working trampoline CL.",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1f8ac09_1499b1dd",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "\"Call frame\" is a bit ambiguous; both types call something (either bytecode or Rust code).  Would you consider \"bytecode frame\" instead?",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72ddd245_11d49f11",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "I would, but I\u0027d also prefer to rename that after the chain around cl/8104 is done. I\u0027ve filed b/258 to track this so we can do it afterwards as part of cleaning up.",
      "parentUuid": "b1f8ac09_1499b1dd",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "799fbeec_ae4e977a",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "Have you found a nice tool for drawing diagrams like this?",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b098f83_0f9c48d9",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "Well, Emacs, but it doesn\u0027t really help that much. I use artist-mode to get approximate initial spacing of the text, and then manually edit the boxes. I\u0027ve done this a lot so I\u0027m quite fast at it, using reference pages like http://xahlee.info/comp/unicode_drawing_shapes.html\n\nAs an aside, it\u0027s incredibly infuriating that none of the arrows present in Unicode match up correctly with the box drawing characters, see this horrible example: https://gist.github.com/tazjin/aea039475e2da8a890955ec20c91f22a",
      "parentUuid": "799fbeec_ae4e977a",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "964c34e7_6ca816fe",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "This is much cleaner and easier to understand than the trampoline continuation mechanism.",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a209eee_399f0457",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 148,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "Wait, in the diagram, neither of the inner loops are labeled \"call frame loop\".\n\nOne is labeled \"inner bytecode loop\" and the other is labeled \"inner generator loop\".  I think you mean the first one?",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be9665fe_ddb68117",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 148,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "You\u0027re right, I\u0027ve updated all the terminology to be consistent with \"bytecode frame\" and \"inner bytecode loop\".",
      "parentUuid": "2a209eee_399f0457",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7e8242d_d6384e17",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 183,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "Is it possible for one bytecode function to invoke another bytecode function (which is in a different chunk) without leaving the inner call frame loop?",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08411ccb_706ecc60",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 183,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "No, but for a slightly different reason (see cl/8147). Since function applications are thunked, *all* function applications are actually tail calls when invoked from bytecode (the only function applications that are not are those invoked from builtins).\n\nWhat this means is that when a call is encountered, the current frame is always being left anyways (and currently actually removed in favour of the new one). We *could* keep them around for better traces in error reporting, but that hasn\u0027t been a focus yet.",
      "parentUuid": "a7e8242d_d6384e17",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eedfeb06_b9235b76",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 183,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-11T11:09:11Z",
      "side": 1,
      "message": "\u003e all function applications are actually tail calls \n\nI disagree: https://cl.tvl.fyi/c/depot/+/8147/comments/f53dd5d7_2ea6f4da",
      "parentUuid": "08411ccb_706ecc60",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a209d8b7_7fddc681",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 183,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-11T13:24:12Z",
      "side": 1,
      "message": "What I meant would be more precisely expressed as \"all function applications are theoretically tail-calls, as they occur in the last meaningful instruction of their code chunk, as all function applications are thunked\". Replying on the other CL about the function name ðŸ˜Š",
      "parentUuid": "eedfeb06_b9235b76",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6326410a_8fbda31a",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 183,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-13T14:48:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a209d8b7_7fddc681",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1c9dd2b_4f6b00df",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "This is sort of a tautology...\n\nIf you want to keep the name \"generator loop\" please state clearly something like \"the purpose of the generator loop is to execute builtins\" or something like that.",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d11e0e70_1785de4c",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "It\u0027s not just for builtins, there are several things that it does.\n\nThere is literally a loop which (somewhat simplified) does this:\n\n  loop {\n    match gen.resume_with(msg) { \n      /* ... */\n    }\n  }\n  \nIt is this loop which \"drives\" the execution of the generator. Based on what the generator returns (either \"Yielded\", which means it\u0027s requesting something from the VM and the async state machine is suspended at that point, or \"Done\", which means it has run to completion and its result goes on the stack).\n\nI\u0027ve rephrased the sentence a little bit to try and make this clearer, as I think the missing link was that behaviour described in my last paragraph.",
      "parentUuid": "f1c9dd2b_4f6b00df",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fff7400_6cae21b5",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-11T11:09:11Z",
      "side": 1,
      "message": "Yeah, I get that.\n\nI think the `genawaiter` crate\u0027s terminology is a really bad fit for the way tvix is using it.\n\n`genawaiter` is meant for situations where you very obviously have a producer and a consumer; the consumer pulls data out of the producer and the producer is otherwise passive and never makes any requests to the consumer.\n\nTvix is implementing true coroutines, where neither the bytecode side nor the rust side is truly \"in charge\".  Bytecode can call `builtins` (which are rust code) and rust can call bytecode (e.g. `builtins.sort` calling the comparison function that was passed to it).\n\nIf you\u0027ve found the `genawaiter` codebase meets your needs great, keep using it, but I urge you to totally abandon their terminology.  Otherwise people reading your code have to memorize \"generator means rust code\", \"resume means calling a builtin\", etc etc.  It\u0027s not like math or physics where you can skip the memorization and re-derive these things from first principles when you take the exam... the names are now arbitrary because you don\u0027t have a generator/consumer anymore, you have two coroutines.",
      "parentUuid": "d11e0e70_1785de4c",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb4e08d1_720f7adb",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-11T13:24:12Z",
      "side": 1,
      "message": "Hm, the requests do not go from the generators to bytecode chunks, though. They go to the VM. In a sense, the generators ... generate ... requests that are consumed by the *VM*. This also makes me hesitant about your suggested naming of the request/response function types, as it\u0027s totally possible (and in fact frequently occurs) that a generator requests something that another generator produces, in which case `NativeToBytecode` is incorrect - there\u0027s no bytecode involved.\n\nThis all fundamentally revolves around the VM in my head, so if we go down that naming route it should be something closer to `NativeToVM`, `VMToNative`, but these also sound strange to me because, well, the VM is in fact written in native Rust.",
      "parentUuid": "0fff7400_6cae21b5",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec89d21e_5cdb0e26",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-11T20:23:16Z",
      "side": 1,
      "message": "What about naming them based on who produces them, so either a generator/native code or the VM?\n\nGeneratorMessage/NativeMessage - a message from a generator/native code\n\nVMMessage - a message from the VM",
      "parentUuid": "fb4e08d1_720f7adb",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e35f4f53_6a1abce6",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-13T14:48:12Z",
      "side": 1,
      "message": "\u003e GeneratorMessage/NativeMessage - a message from a generator/native code\n\nThat sounds great.\n\n\u003e VMMessage - a message from the VM\n\nThe `VMRequest` (request *to* the VM) / `VMResponse` (response *from* the VM) would also be great.\n\nEither one.\n\nMark this resolved when you update it.",
      "parentUuid": "ec89d21e_5cdb0e26",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0df0f0_f12315f9",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-13T21:50:04Z",
      "side": 1,
      "message": "Done in cl/8291, please approve that. I\u0027ll have to update the link to the type in this document after that is submitted.",
      "parentUuid": "e35f4f53_6a1abce6",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7c93ed5_3b5e396e",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 209,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "Nitpick: the diagram would be easier to understand if you reflect the inner loop about the vertical axis.\n\nThat way it looks like \"the generator\" is off to our right and \"the bytecode loop\" (and the rest of the VM) is off to our left.  Like sitting between two people at a table and turning your attention from one of them to the other (which is basically what tvix is doing here).",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6ee57bb_e676206a",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 209,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "I need to sketch this on paper first, haven\u0027t quite understood exactly what you\u0027re visualising yet :) \n\nCurrently the left side is where \"all the rest is\", so the outer arrows \"come from\" and \"go\" there.",
      "parentUuid": "f7c93ed5_3b5e396e",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c25f8809_477e0bbf",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 209,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-11T11:09:11Z",
      "side": 1,
      "message": "cl/8252",
      "parentUuid": "a6ee57bb_e676206a",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1dd85fb_393b750c",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 209,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-11T13:24:12Z",
      "side": 1,
      "message": "Aha! Yeah, sure, lets do that. I\u0027ll approve your CL and we can merge it once this one is submitted.",
      "parentUuid": "c25f8809_477e0bbf",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8ac993b_0346c71d",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 221,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "\u003e a message *from* the VM *to* the generator\n\nI find this really confusing and hard to keep straight.  I\u0027m not saying it\u0027s incorrect, just confusing.\n\nThe generator exists in order to execute builtins.  Is it legitimate to call this the \"builtins loop\"?  Does the generator ever do anything other than execute (native, Rust) code which is part of the implementation of some builtin?",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dfbe3ce_702c00db",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 221,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "The confusing thing here is that the *first* time a generator is invoked after being instantiated, it is called with a no-op message, which is a constraint imposed by the API of crate that we use for the generator data structures.\n\nAfter that, there is always a ping/pong playing out between the generator and the rest of the VM, in which the generator sends a \"GeneratorRequest\" (requesting something from the VM), and the VM sends it a \"GeneratorResponse\" (returning the result to the VM).\n\nThese requests/responses (linked below in the text under the respective types) are things like \"please force this value\" or \"please import this file through the IO interface\", or in general all things where we previously had a `\u0026mut VM` (which is no longer the case anywhere - VM is now a private type).\n\nGenerators do more than just the execution of builtins. For example, forcing is also a generator because there is some native Rust code (heavily based on the one you wrote for trampolines, and my rewrite of it from cl/8012) that figures out what to do with a given thunk before just entering its bytecode loop.\n\nIt would be correct to say that the generators always execute some native Rust code, which is part of the evaluation implementation. But it\u0027s not just builtins.",
      "parentUuid": "d8ac993b_0346c71d",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90679fa3_bb0ccb91",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 221,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-11T11:09:11Z",
      "side": 1,
      "message": "\u003e It would be correct to say that the generators always execute some native Rust code, which is part of the evaluation implementation. \n\nOkay that makes sense.\n\n\u003e \"GeneratorRequest\" (requesting something from the VM), and the VM sends it a \"GeneratorResponse\" (returning the result to the VM).\n\nI keep stumbling over this too.  GeneratorRequest is a request *from* the generator not a request *to* the generator?  Isn\u0027t that sort of the opposite of the convention?  Like how HTTPRequest is generally a request *to* the HTTP server?",
      "parentUuid": "6dfbe3ce_702c00db",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4805c79_2f2ee5c5",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 221,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-11T13:24:12Z",
      "side": 1,
      "message": "In some sense the VM is a \"server\" here that receives \"requests\" and returns \"responses\", whether those involve running other frames (native or bytecode), or doing something in the VM, is kind of irrelevant for the thing doing the requesting (the generators).\n\nI think following the HTTP convention would lead us to something like `VMRequest` / `VMResponse`. Hmm, I\u0027m not sure.",
      "parentUuid": "90679fa3_bb0ccb91",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e08fda0_d5fd6192",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 221,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-13T14:48:12Z",
      "side": 1,
      "message": "\u003e I think following the HTTP convention would lead us to something like VMRequest / VMResponse.\n\nThat would be a big improvement.",
      "parentUuid": "c4805c79_2f2ee5c5",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d055b6d_2ddd4569",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 221,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-13T21:49:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2e08fda0_d5fd6192",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdd3fee1_6d818cfc",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 234,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "Can you give an example of an inline request?  I\u0027m having trouble thinking of one.  When a builtin needs to execute bytecode that would be an \"other request\" since it needs to leave the generator loop and move into the bytecode loop.",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ac68224_35f9fa5b",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 234,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "Suggest s/Requests/Generator requests/ for clarity.",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f9c162a_e4098f62",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 234,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "Here are some of the inline requests we have right now:\n\n1. Stack push (used under-the-hood by a helper function to prepare the VM\u0027s stack for a function call from a generator).\n\n2. Emitting a warning during evaluation.\n\n3. Interacting with the VM\u0027s import cache (to retrieve already imported thunks when importing Nix files).\n\n4. Interacting with the EvalIO interface (I think this didn\u0027t exist last time you were around: It\u0027s the bridge between tvix-eval and things like the store, so stuff like \"does this path exist?\" or \"read this directory!\").\n\nBasically it\u0027s operations that previously required a `\u0026mut VM`, which the generator loop (which is part of the VM implementation and has access to its internals) can do.",
      "parentUuid": "fdd3fee1_6d818cfc",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12aa643c_7a86ef3e",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 234,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ac68224_35f9fa5b",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "286b1530_12cfd6a9",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 234,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:52:08Z",
      "side": 1,
      "message": "maybe the other ones are \"frame requests\" because they request execution of another frame (whether generator or bytecode)? Hmm",
      "parentUuid": "9f9c162a_e4098f62",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69d3a3a9_e26e0660",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 234,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-11T11:09:11Z",
      "side": 1,
      "message": "See https://cl.tvl.fyi/c/depot/+/8226/comment/c2cc2023_c7170f85/",
      "parentUuid": "286b1530_12cfd6a9",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe5d1cbb_95f1ef52",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 234,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-11T13:24:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "69d3a3a9_e26e0660",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2cc2023_c7170f85",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 236,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "We need a better name than \"other requests\".",
      "range": {
        "startLine": 236,
        "startChar": 36,
        "endLine": 236,
        "endChar": 50
      },
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e3449d5_e85be0c7",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 236,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "Suggestions welcome! They\u0027re \"more complex\" than inline requests, so maybe something like \"complex requests\"? Those would be stuff like \"force a value\", \"call a Nix function\", \"coerce value to string\" and so on.",
      "parentUuid": "c2cc2023_c7170f85",
      "range": {
        "startLine": 236,
        "startChar": 36,
        "endLine": 236,
        "endChar": 50
      },
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a89af6c5_9a78f66c",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 236,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-11T11:09:11Z",
      "side": 1,
      "message": "How about single-frame request and multi-frame request?",
      "parentUuid": "8e3449d5_e85be0c7",
      "range": {
        "startLine": 236,
        "startChar": 36,
        "endLine": 236,
        "endChar": 50
      },
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc5bf660_8ef269c6",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 236,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-11T13:24:12Z",
      "side": 1,
      "message": "That\u0027s good. How about s/single/same, so we get same-frame request and multi-frame request?",
      "parentUuid": "a89af6c5_9a78f66c",
      "range": {
        "startLine": 236,
        "startChar": 36,
        "endLine": 236,
        "endChar": 50
      },
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b28c5126_08a00945",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 236,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-13T14:48:12Z",
      "side": 1,
      "message": "Sounds great.",
      "parentUuid": "bc5bf660_8ef269c6",
      "range": {
        "startLine": 236,
        "startChar": 36,
        "endLine": 236,
        "endChar": 50
      },
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f72aafd2_f885378b",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 236,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-13T21:49:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b28c5126_08a00945",
      "range": {
        "startLine": 236,
        "startChar": 36,
        "endLine": 236,
        "endChar": 50
      },
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c92ad470_84e78f87",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 306,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-08T11:58:34Z",
      "side": 1,
      "message": "3. Convince the Rust devs that Rust needs a way to guarantee constant-stack-depth tail calls (most likely a `tailcall` keyword).\n\nObviously this isn\u0027t going to happen, but the point here is that this is really all about not overflowing the stack.  Other interpreters (Boa) written in Rust have hit this problem too.",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1169a64_58b73cd5",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 306,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-03-08T12:44:36Z",
      "side": 1,
      "message": "Added it for completeness sake, though I\u0027m not convinced we can actually implement everything here through tail calls ;)",
      "parentUuid": "c92ad470_84e78f87",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6818b149_96fb1e11",
        "filename": "tvix/eval/docs/vm-loop.md",
        "patchSetId": 9
      },
      "lineNbr": 306,
      "author": {
        "id": 1000066
      },
      "writtenOn": "2023-03-11T11:09:11Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "d1169a64_58b73cd5",
      "revId": "b98fd5fd74481c46c91d3d309679138153b5e8c9",
      "serverId": "4fdfa107-4df9-4596-8e0a-1d2bbdd96e36"
    }
  ]
}